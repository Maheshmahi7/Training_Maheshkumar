#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class music_player;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"music_player"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class music_player : public ::System::Data::DataSet {
    public : ref class songsDataTable;
    public : ref class songDataTable;
    public : ref class song_artistsDataTable;
    public : ref class song_artistDataTable;
    public : ref class artistsDataTable;
    public : ref class artistDataTable;
    public : ref class artist_albumsDataTable;
    public : ref class artist_albumDataTable;
    public : ref class artist_songsDataTable;
    public : ref class artist_songDataTable;
    public : ref class albumsDataTable;
    public : ref class albumDataTable;
    public : ref class album_artistsDataTable;
    public : ref class album_artistDataTable;
    public : ref class album_songsDataTable;
    public : ref class album_songDataTable;
    public : ref class playlistsDataTable;
    public : ref class playlistDataTable;
    public : ref class playlist_songsDataTable;
    public : ref class playlist_songDataTable;
    public : ref class songsRow;
    public : ref class songRow;
    public : ref class song_artistsRow;
    public : ref class song_artistRow;
    public : ref class artistsRow;
    public : ref class artistRow;
    public : ref class artist_albumsRow;
    public : ref class artist_albumRow;
    public : ref class artist_songsRow;
    public : ref class artist_songRow;
    public : ref class albumsRow;
    public : ref class albumRow;
    public : ref class album_artistsRow;
    public : ref class album_artistRow;
    public : ref class album_songsRow;
    public : ref class album_songRow;
    public : ref class playlistsRow;
    public : ref class playlistRow;
    public : ref class playlist_songsRow;
    public : ref class playlist_songRow;
    public : ref class songsRowChangeEvent;
    public : ref class songRowChangeEvent;
    public : ref class song_artistsRowChangeEvent;
    public : ref class song_artistRowChangeEvent;
    public : ref class artistsRowChangeEvent;
    public : ref class artistRowChangeEvent;
    public : ref class artist_albumsRowChangeEvent;
    public : ref class artist_albumRowChangeEvent;
    public : ref class artist_songsRowChangeEvent;
    public : ref class artist_songRowChangeEvent;
    public : ref class albumsRowChangeEvent;
    public : ref class albumRowChangeEvent;
    public : ref class album_artistsRowChangeEvent;
    public : ref class album_artistRowChangeEvent;
    public : ref class album_songsRowChangeEvent;
    public : ref class album_songRowChangeEvent;
    public : ref class playlistsRowChangeEvent;
    public : ref class playlistRowChangeEvent;
    public : ref class playlist_songsRowChangeEvent;
    public : ref class playlist_songRowChangeEvent;
    
    private: music_player::songsDataTable^  tablesongs;
    
    private: music_player::songDataTable^  tablesong;
    
    private: music_player::song_artistsDataTable^  tablesong_artists;
    
    private: music_player::song_artistDataTable^  tablesong_artist;
    
    private: music_player::artistsDataTable^  tableartists;
    
    private: music_player::artistDataTable^  tableartist;
    
    private: music_player::artist_albumsDataTable^  tableartist_albums;
    
    private: music_player::artist_albumDataTable^  tableartist_album;
    
    private: music_player::artist_songsDataTable^  tableartist_songs;
    
    private: music_player::artist_songDataTable^  tableartist_song;
    
    private: music_player::albumsDataTable^  tablealbums;
    
    private: music_player::albumDataTable^  tablealbum;
    
    private: music_player::album_artistsDataTable^  tablealbum_artists;
    
    private: music_player::album_artistDataTable^  tablealbum_artist;
    
    private: music_player::album_songsDataTable^  tablealbum_songs;
    
    private: music_player::album_songDataTable^  tablealbum_song;
    
    private: music_player::playlistsDataTable^  tableplaylists;
    
    private: music_player::playlistDataTable^  tableplaylist;
    
    private: music_player::playlist_songsDataTable^  tableplaylist_songs;
    
    private: music_player::playlist_songDataTable^  tableplaylist_song;
    
    private: ::System::Data::DataRelation^  relationsongs_song;
    
    private: ::System::Data::DataRelation^  relationsong_song_artists;
    
    private: ::System::Data::DataRelation^  relationsong_artists_song_artist;
    
    private: ::System::Data::DataRelation^  relationartists_artist;
    
    private: ::System::Data::DataRelation^  relationartist_artist_albums;
    
    private: ::System::Data::DataRelation^  relationartist_albums_artist_album;
    
    private: ::System::Data::DataRelation^  relationartist_artist_songs;
    
    private: ::System::Data::DataRelation^  relationartist_songs_artist_song;
    
    private: ::System::Data::DataRelation^  relationalbums_album;
    
    private: ::System::Data::DataRelation^  relationalbum_album_artists;
    
    private: ::System::Data::DataRelation^  relationalbum_artists_album_artist;
    
    private: ::System::Data::DataRelation^  relationalbum_album_songs;
    
    private: ::System::Data::DataRelation^  relationalbum_songs_album_song;
    
    private: ::System::Data::DataRelation^  relationplaylists_playlist;
    
    private: ::System::Data::DataRelation^  relationplaylist_playlist_songs;
    
    private: ::System::Data::DataRelation^  relationplaylist_songs_playlist_song;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void songsRowChangeEventHandler(::System::Object^  sender, music_player::songsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void songRowChangeEventHandler(::System::Object^  sender, music_player::songRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void song_artistsRowChangeEventHandler(::System::Object^  sender, music_player::song_artistsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void song_artistRowChangeEventHandler(::System::Object^  sender, music_player::song_artistRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void artistsRowChangeEventHandler(::System::Object^  sender, music_player::artistsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void artistRowChangeEventHandler(::System::Object^  sender, music_player::artistRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void artist_albumsRowChangeEventHandler(::System::Object^  sender, music_player::artist_albumsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void artist_albumRowChangeEventHandler(::System::Object^  sender, music_player::artist_albumRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void artist_songsRowChangeEventHandler(::System::Object^  sender, music_player::artist_songsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void artist_songRowChangeEventHandler(::System::Object^  sender, music_player::artist_songRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void albumsRowChangeEventHandler(::System::Object^  sender, music_player::albumsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void albumRowChangeEventHandler(::System::Object^  sender, music_player::albumRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void album_artistsRowChangeEventHandler(::System::Object^  sender, music_player::album_artistsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void album_artistRowChangeEventHandler(::System::Object^  sender, music_player::album_artistRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void album_songsRowChangeEventHandler(::System::Object^  sender, music_player::album_songsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void album_songRowChangeEventHandler(::System::Object^  sender, music_player::album_songRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void playlistsRowChangeEventHandler(::System::Object^  sender, music_player::playlistsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void playlistRowChangeEventHandler(::System::Object^  sender, music_player::playlistRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void playlist_songsRowChangeEventHandler(::System::Object^  sender, music_player::playlist_songsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void playlist_songRowChangeEventHandler(::System::Object^  sender, music_player::playlist_songRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    music_player();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    music_player(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::songsDataTable^  songs {
        music_player::songsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::songDataTable^  song {
        music_player::songDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::song_artistsDataTable^  song_artists {
        music_player::song_artistsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::song_artistDataTable^  song_artist {
        music_player::song_artistDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::artistsDataTable^  artists {
        music_player::artistsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::artistDataTable^  artist {
        music_player::artistDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::artist_albumsDataTable^  artist_albums {
        music_player::artist_albumsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::artist_albumDataTable^  artist_album {
        music_player::artist_albumDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::artist_songsDataTable^  artist_songs {
        music_player::artist_songsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::artist_songDataTable^  artist_song {
        music_player::artist_songDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::albumsDataTable^  albums {
        music_player::albumsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::albumDataTable^  album {
        music_player::albumDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::album_artistsDataTable^  album_artists {
        music_player::album_artistsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::album_artistDataTable^  album_artist {
        music_player::album_artistDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::album_songsDataTable^  album_songs {
        music_player::album_songsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::album_songDataTable^  album_song {
        music_player::album_songDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::playlistsDataTable^  playlists {
        music_player::playlistsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::playlistDataTable^  playlist {
        music_player::playlistDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::playlist_songsDataTable^  playlist_songs {
        music_player::playlist_songsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property music_player::playlist_songDataTable^  playlist_song {
        music_player::playlist_songDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesongs();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesong();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesong_artists();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesong_artist();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeartists();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeartist();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeartist_albums();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeartist_album();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeartist_songs();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeartist_song();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializealbums();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializealbum();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializealbum_artists();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializealbum_artist();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializealbum_songs();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializealbum_song();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeplaylists();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeplaylist();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeplaylist_songs();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeplaylist_song();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class songsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnsongs_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songsRowChangeEventHandler^  songsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songsRowChangeEventHandler^  songsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songsRowChangeEventHandler^  songsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songsRowChangeEventHandler^  songsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::songsRow^  default [::System::Int32 ] {
            music_player::songsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsongsRow(music_player::songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::songsRow^  AddsongsRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::songsRow^  NewsongsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesongsRow(music_player::songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class songDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnsong_name;
        
        private: ::System::Data::DataColumn^  columnduration;
        
        private: ::System::Data::DataColumn^  columnsong_album;
        
        private: ::System::Data::DataColumn^  columnsong_Id;
        
        private: ::System::Data::DataColumn^  columnsongs_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songRowChangeEventHandler^  songRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songRowChangeEventHandler^  songRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songRowChangeEventHandler^  songRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::songRowChangeEventHandler^  songRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  song_nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  durationColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  song_albumColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  song_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::songRow^  default [::System::Int32 ] {
            music_player::songRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsongRow(music_player::songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::songRow^  AddsongRow(System::String^  ID, System::String^  song_name, System::String^  duration, System::String^  song_album, 
                    music_player::songsRow^  parentsongsRowBysongs_song);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::songRow^  NewsongRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesongRow(music_player::songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class song_artistsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnsong_artists_Id;
        
        private: ::System::Data::DataColumn^  columnsong_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistsRowChangeEventHandler^  song_artistsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistsRowChangeEventHandler^  song_artistsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistsRowChangeEventHandler^  song_artistsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistsRowChangeEventHandler^  song_artistsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  song_artists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  song_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::song_artistsRow^  default [::System::Int32 ] {
            music_player::song_artistsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addsong_artistsRow(music_player::song_artistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::song_artistsRow^  Addsong_artistsRow(music_player::songRow^  parentsongRowBysong_song_artists);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::song_artistsRow^  Newsong_artistsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removesong_artistsRow(music_player::song_artistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class song_artistDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnsong_artist_Column;
        
        private: ::System::Data::DataColumn^  columnsong_artists_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistRowChangeEventHandler^  song_artistRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistRowChangeEventHandler^  song_artistRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistRowChangeEventHandler^  song_artistRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::song_artistRowChangeEventHandler^  song_artistRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  song_artist_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  song_artists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::song_artistRow^  default [::System::Int32 ] {
            music_player::song_artistRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addsong_artistRow(music_player::song_artistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::song_artistRow^  Addsong_artistRow(System::String^  song_artist_Column, music_player::song_artistsRow^  parentsong_artistsRowBysong_artists_song_artist);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::song_artistRow^  Newsong_artistRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removesong_artistRow(music_player::song_artistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class artistsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnartists_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistsRowChangeEventHandler^  artistsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistsRowChangeEventHandler^  artistsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistsRowChangeEventHandler^  artistsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistsRowChangeEventHandler^  artistsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artistsRow^  default [::System::Int32 ] {
            music_player::artistsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddartistsRow(music_player::artistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artistsRow^  AddartistsRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artistsRow^  NewartistsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveartistsRow(music_player::artistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class artistDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnartist_name;
        
        private: ::System::Data::DataColumn^  columnartist_Id;
        
        private: ::System::Data::DataColumn^  columnartists_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistRowChangeEventHandler^  artistRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistRowChangeEventHandler^  artistRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistRowChangeEventHandler^  artistRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artistRowChangeEventHandler^  artistRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artistRow^  default [::System::Int32 ] {
            music_player::artistRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddartistRow(music_player::artistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artistRow^  AddartistRow(System::String^  ID, System::String^  artist_name, music_player::artistsRow^  parentartistsRowByartists_artist);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artistRow^  NewartistRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveartistRow(music_player::artistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class artist_albumsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnartist_albums_Id;
        
        private: ::System::Data::DataColumn^  columnartist_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumsRowChangeEventHandler^  artist_albumsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumsRowChangeEventHandler^  artist_albumsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumsRowChangeEventHandler^  artist_albumsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumsRowChangeEventHandler^  artist_albumsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_albums_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_albumsRow^  default [::System::Int32 ] {
            music_player::artist_albumsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addartist_albumsRow(music_player::artist_albumsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_albumsRow^  Addartist_albumsRow(music_player::artistRow^  parentartistRowByartist_artist_albums);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_albumsRow^  Newartist_albumsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeartist_albumsRow(music_player::artist_albumsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class artist_albumDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnartist_album_Column;
        
        private: ::System::Data::DataColumn^  columnartist_albums_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumRowChangeEventHandler^  artist_albumRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumRowChangeEventHandler^  artist_albumRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumRowChangeEventHandler^  artist_albumRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_albumRowChangeEventHandler^  artist_albumRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_album_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_albums_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_albumRow^  default [::System::Int32 ] {
            music_player::artist_albumRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addartist_albumRow(music_player::artist_albumRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_albumRow^  Addartist_albumRow(System::String^  artist_album_Column, music_player::artist_albumsRow^  parentartist_albumsRowByartist_albums_artist_album);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_albumRow^  Newartist_albumRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeartist_albumRow(music_player::artist_albumRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class artist_songsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnartist_songs_Id;
        
        private: ::System::Data::DataColumn^  columnartist_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songsRowChangeEventHandler^  artist_songsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songsRowChangeEventHandler^  artist_songsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songsRowChangeEventHandler^  artist_songsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songsRowChangeEventHandler^  artist_songsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_songsRow^  default [::System::Int32 ] {
            music_player::artist_songsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addartist_songsRow(music_player::artist_songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_songsRow^  Addartist_songsRow(music_player::artistRow^  parentartistRowByartist_artist_songs);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_songsRow^  Newartist_songsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeartist_songsRow(music_player::artist_songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class artist_songDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnartist_song_Column;
        
        private: ::System::Data::DataColumn^  columnartist_songs_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songRowChangeEventHandler^  artist_songRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songRowChangeEventHandler^  artist_songRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songRowChangeEventHandler^  artist_songRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::artist_songRowChangeEventHandler^  artist_songRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_song_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  artist_songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_songRow^  default [::System::Int32 ] {
            music_player::artist_songRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addartist_songRow(music_player::artist_songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_songRow^  Addartist_songRow(System::String^  artist_song_Column, music_player::artist_songsRow^  parentartist_songsRowByartist_songs_artist_song);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::artist_songRow^  Newartist_songRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeartist_songRow(music_player::artist_songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class albumsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalbums_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumsRowChangeEventHandler^  albumsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumsRowChangeEventHandler^  albumsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumsRowChangeEventHandler^  albumsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumsRowChangeEventHandler^  albumsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  albums_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::albumsRow^  default [::System::Int32 ] {
            music_player::albumsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddalbumsRow(music_player::albumsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::albumsRow^  AddalbumsRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::albumsRow^  NewalbumsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovealbumsRow(music_player::albumsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class albumDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnalbum_name;
        
        private: ::System::Data::DataColumn^  columnalbum_Id;
        
        private: ::System::Data::DataColumn^  columnalbums_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumRowChangeEventHandler^  albumRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumRowChangeEventHandler^  albumRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumRowChangeEventHandler^  albumRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::albumRowChangeEventHandler^  albumRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  albums_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::albumRow^  default [::System::Int32 ] {
            music_player::albumRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddalbumRow(music_player::albumRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::albumRow^  AddalbumRow(System::String^  ID, System::String^  album_name, music_player::albumsRow^  parentalbumsRowByalbums_album);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::albumRow^  NewalbumRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovealbumRow(music_player::albumRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class album_artistsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalbum_artists_Id;
        
        private: ::System::Data::DataColumn^  columnalbum_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistsRowChangeEventHandler^  album_artistsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistsRowChangeEventHandler^  album_artistsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistsRowChangeEventHandler^  album_artistsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistsRowChangeEventHandler^  album_artistsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_artists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_artistsRow^  default [::System::Int32 ] {
            music_player::album_artistsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addalbum_artistsRow(music_player::album_artistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_artistsRow^  Addalbum_artistsRow(music_player::albumRow^  parentalbumRowByalbum_album_artists);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_artistsRow^  Newalbum_artistsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removealbum_artistsRow(music_player::album_artistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class album_artistDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalbum_artist_Column;
        
        private: ::System::Data::DataColumn^  columnalbum_artists_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistRowChangeEventHandler^  album_artistRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistRowChangeEventHandler^  album_artistRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistRowChangeEventHandler^  album_artistRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_artistRowChangeEventHandler^  album_artistRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_artist_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_artists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_artistRow^  default [::System::Int32 ] {
            music_player::album_artistRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addalbum_artistRow(music_player::album_artistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_artistRow^  Addalbum_artistRow(System::String^  album_artist_Column, music_player::album_artistsRow^  parentalbum_artistsRowByalbum_artists_album_artist);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_artistRow^  Newalbum_artistRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removealbum_artistRow(music_player::album_artistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class album_songsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalbum_songs_Id;
        
        private: ::System::Data::DataColumn^  columnalbum_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songsRowChangeEventHandler^  album_songsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songsRowChangeEventHandler^  album_songsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songsRowChangeEventHandler^  album_songsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songsRowChangeEventHandler^  album_songsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_songsRow^  default [::System::Int32 ] {
            music_player::album_songsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addalbum_songsRow(music_player::album_songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_songsRow^  Addalbum_songsRow(music_player::albumRow^  parentalbumRowByalbum_album_songs);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_songsRow^  Newalbum_songsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removealbum_songsRow(music_player::album_songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class album_songDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnalbum_song_Column;
        
        private: ::System::Data::DataColumn^  columnalbum_songs_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songRowChangeEventHandler^  album_songRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songRowChangeEventHandler^  album_songRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songRowChangeEventHandler^  album_songRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::album_songRowChangeEventHandler^  album_songRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_song_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  album_songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_songRow^  default [::System::Int32 ] {
            music_player::album_songRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addalbum_songRow(music_player::album_songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_songRow^  Addalbum_songRow(System::String^  album_song_Column, music_player::album_songsRow^  parentalbum_songsRowByalbum_songs_album_song);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::album_songRow^  Newalbum_songRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removealbum_songRow(music_player::album_songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class playlistsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnplaylists_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistsRowChangeEventHandler^  playlistsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistsRowChangeEventHandler^  playlistsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistsRowChangeEventHandler^  playlistsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistsRowChangeEventHandler^  playlistsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlistsRow^  default [::System::Int32 ] {
            music_player::playlistsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddplaylistsRow(music_player::playlistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlistsRow^  AddplaylistsRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlistsRow^  NewplaylistsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveplaylistsRow(music_player::playlistsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class playlistDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnplaylist_name;
        
        private: ::System::Data::DataColumn^  columnplaylist_Id;
        
        private: ::System::Data::DataColumn^  columnplaylists_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistRowChangeEventHandler^  playlistRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistRowChangeEventHandler^  playlistRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistRowChangeEventHandler^  playlistRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlistRowChangeEventHandler^  playlistRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlist_nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlist_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlists_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlistRow^  default [::System::Int32 ] {
            music_player::playlistRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddplaylistRow(music_player::playlistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlistRow^  AddplaylistRow(System::String^  ID, System::String^  playlist_name, music_player::playlistsRow^  parentplaylistsRowByplaylists_playlist);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlistRow^  NewplaylistRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveplaylistRow(music_player::playlistRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class playlist_songsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnplaylist_songs_Id;
        
        private: ::System::Data::DataColumn^  columnplaylist_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songsRowChangeEventHandler^  playlist_songsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songsRowChangeEventHandler^  playlist_songsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songsRowChangeEventHandler^  playlist_songsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songsRowChangeEventHandler^  playlist_songsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlist_songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlist_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlist_songsRow^  default [::System::Int32 ] {
            music_player::playlist_songsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addplaylist_songsRow(music_player::playlist_songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlist_songsRow^  Addplaylist_songsRow(music_player::playlistRow^  parentplaylistRowByplaylist_playlist_songs);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlist_songsRow^  Newplaylist_songsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeplaylist_songsRow(music_player::playlist_songsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class playlist_songDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnplaylist_song_Column;
        
        private: ::System::Data::DataColumn^  columnplaylist_songs_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songRowChangeEventHandler^  playlist_songRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songRowChangeEventHandler^  playlist_songRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songRowChangeEventHandler^  playlist_songRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event music_player::playlist_songRowChangeEventHandler^  playlist_songRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlist_song_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  playlist_songs_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlist_songRow^  default [::System::Int32 ] {
            music_player::playlist_songRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Addplaylist_songRow(music_player::playlist_songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlist_songRow^  Addplaylist_songRow(System::String^  playlist_song_Column, music_player::playlist_songsRow^  parentplaylist_songsRowByplaylist_songs_playlist_song);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        music_player::playlist_songRow^  Newplaylist_songRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Removeplaylist_songRow(music_player::playlist_songRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class songsRow : public ::System::Data::DataRow {
        
        private: music_player::songsDataTable^  tablesongs;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::songRow^  >^  GetsongRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class songRow : public ::System::Data::DataRow {
        
        private: music_player::songDataTable^  tablesong;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ID {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  song_name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  duration {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  song_album {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 song_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::songsRow^  songsRow {
            music_player::songsRow^  get();
            System::Void set(music_player::songsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issongs_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsongs_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::song_artistsRow^  >^  Getsong_artistsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class song_artistsRow : public ::System::Data::DataRow {
        
        private: music_player::song_artistsDataTable^  tablesong_artists;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 song_artists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 song_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::songRow^  songRow {
            music_player::songRow^  get();
            System::Void set(music_player::songRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issong_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsong_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::song_artistRow^  >^  Getsong_artistRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class song_artistRow : public ::System::Data::DataRow {
        
        private: music_player::song_artistDataTable^  tablesong_artist;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  song_artist_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 song_artists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::song_artistsRow^  song_artistsRow {
            music_player::song_artistsRow^  get();
            System::Void set(music_player::song_artistsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issong_artist_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsong_artist_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issong_artists_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsong_artists_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class artistsRow : public ::System::Data::DataRow {
        
        private: music_player::artistsDataTable^  tableartists;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::artistRow^  >^  GetartistRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class artistRow : public ::System::Data::DataRow {
        
        private: music_player::artistDataTable^  tableartist;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ID {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  artist_name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artist_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artistsRow^  artistsRow {
            music_player::artistsRow^  get();
            System::Void set(music_player::artistsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isartists_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setartists_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::artist_albumsRow^  >^  Getartist_albumsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::artist_songsRow^  >^  Getartist_songsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class artist_albumsRow : public ::System::Data::DataRow {
        
        private: music_player::artist_albumsDataTable^  tableartist_albums;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artist_albums_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artist_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artistRow^  artistRow {
            music_player::artistRow^  get();
            System::Void set(music_player::artistRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isartist_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setartist_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::artist_albumRow^  >^  Getartist_albumRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class artist_albumRow : public ::System::Data::DataRow {
        
        private: music_player::artist_albumDataTable^  tableartist_album;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  artist_album_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artist_albums_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_albumsRow^  artist_albumsRow {
            music_player::artist_albumsRow^  get();
            System::Void set(music_player::artist_albumsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isartist_album_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setartist_album_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isartist_albums_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setartist_albums_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class artist_songsRow : public ::System::Data::DataRow {
        
        private: music_player::artist_songsDataTable^  tableartist_songs;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artist_songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artist_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artistRow^  artistRow {
            music_player::artistRow^  get();
            System::Void set(music_player::artistRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isartist_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setartist_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::artist_songRow^  >^  Getartist_songRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class artist_songRow : public ::System::Data::DataRow {
        
        private: music_player::artist_songDataTable^  tableartist_song;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  artist_song_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 artist_songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_songsRow^  artist_songsRow {
            music_player::artist_songsRow^  get();
            System::Void set(music_player::artist_songsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isartist_song_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setartist_song_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isartist_songs_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setartist_songs_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class albumsRow : public ::System::Data::DataRow {
        
        private: music_player::albumsDataTable^  tablealbums;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 albums_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::albumRow^  >^  GetalbumRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class albumRow : public ::System::Data::DataRow {
        
        private: music_player::albumDataTable^  tablealbum;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ID {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  album_name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 album_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 albums_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::albumsRow^  albumsRow {
            music_player::albumsRow^  get();
            System::Void set(music_player::albumsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isalbums_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setalbums_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::album_artistsRow^  >^  Getalbum_artistsRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::album_songsRow^  >^  Getalbum_songsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class album_artistsRow : public ::System::Data::DataRow {
        
        private: music_player::album_artistsDataTable^  tablealbum_artists;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 album_artists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 album_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::albumRow^  albumRow {
            music_player::albumRow^  get();
            System::Void set(music_player::albumRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isalbum_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setalbum_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::album_artistRow^  >^  Getalbum_artistRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class album_artistRow : public ::System::Data::DataRow {
        
        private: music_player::album_artistDataTable^  tablealbum_artist;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  album_artist_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 album_artists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_artistsRow^  album_artistsRow {
            music_player::album_artistsRow^  get();
            System::Void set(music_player::album_artistsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isalbum_artist_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setalbum_artist_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isalbum_artists_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setalbum_artists_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class album_songsRow : public ::System::Data::DataRow {
        
        private: music_player::album_songsDataTable^  tablealbum_songs;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 album_songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 album_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::albumRow^  albumRow {
            music_player::albumRow^  get();
            System::Void set(music_player::albumRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isalbum_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setalbum_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::album_songRow^  >^  Getalbum_songRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class album_songRow : public ::System::Data::DataRow {
        
        private: music_player::album_songDataTable^  tablealbum_song;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  album_song_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 album_songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_songsRow^  album_songsRow {
            music_player::album_songsRow^  get();
            System::Void set(music_player::album_songsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isalbum_song_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setalbum_song_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isalbum_songs_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setalbum_songs_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class playlistsRow : public ::System::Data::DataRow {
        
        private: music_player::playlistsDataTable^  tableplaylists;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 playlists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::playlistRow^  >^  GetplaylistRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class playlistRow : public ::System::Data::DataRow {
        
        private: music_player::playlistDataTable^  tableplaylist;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ID {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  playlist_name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 playlist_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 playlists_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlistsRow^  playlistsRow {
            music_player::playlistsRow^  get();
            System::Void set(music_player::playlistsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isplaylists_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setplaylists_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::playlist_songsRow^  >^  Getplaylist_songsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class playlist_songsRow : public ::System::Data::DataRow {
        
        private: music_player::playlist_songsDataTable^  tableplaylist_songs;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 playlist_songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 playlist_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlistRow^  playlistRow {
            music_player::playlistRow^  get();
            System::Void set(music_player::playlistRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isplaylist_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setplaylist_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< music_player::playlist_songRow^  >^  Getplaylist_songRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class playlist_songRow : public ::System::Data::DataRow {
        
        private: music_player::playlist_songDataTable^  tableplaylist_song;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  playlist_song_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 playlist_songs_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlist_songsRow^  playlist_songsRow {
            music_player::playlist_songsRow^  get();
            System::Void set(music_player::playlist_songsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isplaylist_song_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setplaylist_song_ColumnNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isplaylist_songs_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setplaylist_songs_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class songsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::songsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songsRowChangeEvent(music_player::songsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::songsRow^  Row {
            music_player::songsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class songRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::songRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        songRowChangeEvent(music_player::songRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::songRow^  Row {
            music_player::songRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class song_artistsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::song_artistsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistsRowChangeEvent(music_player::song_artistsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::song_artistsRow^  Row {
            music_player::song_artistsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class song_artistRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::song_artistRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        song_artistRowChangeEvent(music_player::song_artistRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::song_artistRow^  Row {
            music_player::song_artistRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class artistsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::artistsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistsRowChangeEvent(music_player::artistsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artistsRow^  Row {
            music_player::artistsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class artistRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::artistRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artistRowChangeEvent(music_player::artistRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artistRow^  Row {
            music_player::artistRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class artist_albumsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::artist_albumsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumsRowChangeEvent(music_player::artist_albumsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_albumsRow^  Row {
            music_player::artist_albumsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class artist_albumRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::artist_albumRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_albumRowChangeEvent(music_player::artist_albumRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_albumRow^  Row {
            music_player::artist_albumRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class artist_songsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::artist_songsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songsRowChangeEvent(music_player::artist_songsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_songsRow^  Row {
            music_player::artist_songsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class artist_songRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::artist_songRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        artist_songRowChangeEvent(music_player::artist_songRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::artist_songRow^  Row {
            music_player::artist_songRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class albumsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::albumsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumsRowChangeEvent(music_player::albumsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::albumsRow^  Row {
            music_player::albumsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class albumRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::albumRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        albumRowChangeEvent(music_player::albumRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::albumRow^  Row {
            music_player::albumRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class album_artistsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::album_artistsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistsRowChangeEvent(music_player::album_artistsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_artistsRow^  Row {
            music_player::album_artistsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class album_artistRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::album_artistRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_artistRowChangeEvent(music_player::album_artistRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_artistRow^  Row {
            music_player::album_artistRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class album_songsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::album_songsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songsRowChangeEvent(music_player::album_songsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_songsRow^  Row {
            music_player::album_songsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class album_songRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::album_songRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        album_songRowChangeEvent(music_player::album_songRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::album_songRow^  Row {
            music_player::album_songRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class playlistsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::playlistsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistsRowChangeEvent(music_player::playlistsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlistsRow^  Row {
            music_player::playlistsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class playlistRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::playlistRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlistRowChangeEvent(music_player::playlistRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlistRow^  Row {
            music_player::playlistRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class playlist_songsRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::playlist_songsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songsRowChangeEvent(music_player::playlist_songsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlist_songsRow^  Row {
            music_player::playlist_songsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class playlist_songRowChangeEvent : public ::System::EventArgs {
        
        private: music_player::playlist_songRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        playlist_songRowChangeEvent(music_player::playlist_songRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property music_player::playlist_songRow^  Row {
            music_player::playlist_songRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline music_player::music_player() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &music_player::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline music_player::music_player(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &music_player::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::songsDataTable(ds->Tables[L"songs"])));
        }
        if (ds->Tables[L"song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::songDataTable(ds->Tables[L"song"])));
        }
        if (ds->Tables[L"song_artists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::song_artistsDataTable(ds->Tables[L"song_artists"])));
        }
        if (ds->Tables[L"song_artist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::song_artistDataTable(ds->Tables[L"song_artist"])));
        }
        if (ds->Tables[L"artists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artistsDataTable(ds->Tables[L"artists"])));
        }
        if (ds->Tables[L"artist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artistDataTable(ds->Tables[L"artist"])));
        }
        if (ds->Tables[L"artist_albums"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_albumsDataTable(ds->Tables[L"artist_albums"])));
        }
        if (ds->Tables[L"artist_album"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_albumDataTable(ds->Tables[L"artist_album"])));
        }
        if (ds->Tables[L"artist_songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_songsDataTable(ds->Tables[L"artist_songs"])));
        }
        if (ds->Tables[L"artist_song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_songDataTable(ds->Tables[L"artist_song"])));
        }
        if (ds->Tables[L"albums"] != nullptr) {
            __super::Tables->Add((gcnew music_player::albumsDataTable(ds->Tables[L"albums"])));
        }
        if (ds->Tables[L"album"] != nullptr) {
            __super::Tables->Add((gcnew music_player::albumDataTable(ds->Tables[L"album"])));
        }
        if (ds->Tables[L"album_artists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_artistsDataTable(ds->Tables[L"album_artists"])));
        }
        if (ds->Tables[L"album_artist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_artistDataTable(ds->Tables[L"album_artist"])));
        }
        if (ds->Tables[L"album_songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_songsDataTable(ds->Tables[L"album_songs"])));
        }
        if (ds->Tables[L"album_song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_songDataTable(ds->Tables[L"album_song"])));
        }
        if (ds->Tables[L"playlists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlistsDataTable(ds->Tables[L"playlists"])));
        }
        if (ds->Tables[L"playlist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlistDataTable(ds->Tables[L"playlist"])));
        }
        if (ds->Tables[L"playlist_songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlist_songsDataTable(ds->Tables[L"playlist_songs"])));
        }
        if (ds->Tables[L"playlist_song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlist_songDataTable(ds->Tables[L"playlist_song"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &music_player::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline music_player::songsDataTable^  music_player::songs::get() {
    return this->tablesongs;
}

inline music_player::songDataTable^  music_player::song::get() {
    return this->tablesong;
}

inline music_player::song_artistsDataTable^  music_player::song_artists::get() {
    return this->tablesong_artists;
}

inline music_player::song_artistDataTable^  music_player::song_artist::get() {
    return this->tablesong_artist;
}

inline music_player::artistsDataTable^  music_player::artists::get() {
    return this->tableartists;
}

inline music_player::artistDataTable^  music_player::artist::get() {
    return this->tableartist;
}

inline music_player::artist_albumsDataTable^  music_player::artist_albums::get() {
    return this->tableartist_albums;
}

inline music_player::artist_albumDataTable^  music_player::artist_album::get() {
    return this->tableartist_album;
}

inline music_player::artist_songsDataTable^  music_player::artist_songs::get() {
    return this->tableartist_songs;
}

inline music_player::artist_songDataTable^  music_player::artist_song::get() {
    return this->tableartist_song;
}

inline music_player::albumsDataTable^  music_player::albums::get() {
    return this->tablealbums;
}

inline music_player::albumDataTable^  music_player::album::get() {
    return this->tablealbum;
}

inline music_player::album_artistsDataTable^  music_player::album_artists::get() {
    return this->tablealbum_artists;
}

inline music_player::album_artistDataTable^  music_player::album_artist::get() {
    return this->tablealbum_artist;
}

inline music_player::album_songsDataTable^  music_player::album_songs::get() {
    return this->tablealbum_songs;
}

inline music_player::album_songDataTable^  music_player::album_song::get() {
    return this->tablealbum_song;
}

inline music_player::playlistsDataTable^  music_player::playlists::get() {
    return this->tableplaylists;
}

inline music_player::playlistDataTable^  music_player::playlist::get() {
    return this->tableplaylist;
}

inline music_player::playlist_songsDataTable^  music_player::playlist_songs::get() {
    return this->tableplaylist_songs;
}

inline music_player::playlist_songDataTable^  music_player::playlist_song::get() {
    return this->tableplaylist_song;
}

inline ::System::Data::SchemaSerializationMode music_player::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void music_player::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  music_player::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  music_player::Relations::get() {
    return __super::Relations;
}

inline ::System::Void music_player::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  music_player::Clone() {
    music_player^  cln = (cli::safe_cast<music_player^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean music_player::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void music_player::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::songsDataTable(ds->Tables[L"songs"])));
        }
        if (ds->Tables[L"song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::songDataTable(ds->Tables[L"song"])));
        }
        if (ds->Tables[L"song_artists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::song_artistsDataTable(ds->Tables[L"song_artists"])));
        }
        if (ds->Tables[L"song_artist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::song_artistDataTable(ds->Tables[L"song_artist"])));
        }
        if (ds->Tables[L"artists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artistsDataTable(ds->Tables[L"artists"])));
        }
        if (ds->Tables[L"artist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artistDataTable(ds->Tables[L"artist"])));
        }
        if (ds->Tables[L"artist_albums"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_albumsDataTable(ds->Tables[L"artist_albums"])));
        }
        if (ds->Tables[L"artist_album"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_albumDataTable(ds->Tables[L"artist_album"])));
        }
        if (ds->Tables[L"artist_songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_songsDataTable(ds->Tables[L"artist_songs"])));
        }
        if (ds->Tables[L"artist_song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::artist_songDataTable(ds->Tables[L"artist_song"])));
        }
        if (ds->Tables[L"albums"] != nullptr) {
            __super::Tables->Add((gcnew music_player::albumsDataTable(ds->Tables[L"albums"])));
        }
        if (ds->Tables[L"album"] != nullptr) {
            __super::Tables->Add((gcnew music_player::albumDataTable(ds->Tables[L"album"])));
        }
        if (ds->Tables[L"album_artists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_artistsDataTable(ds->Tables[L"album_artists"])));
        }
        if (ds->Tables[L"album_artist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_artistDataTable(ds->Tables[L"album_artist"])));
        }
        if (ds->Tables[L"album_songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_songsDataTable(ds->Tables[L"album_songs"])));
        }
        if (ds->Tables[L"album_song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::album_songDataTable(ds->Tables[L"album_song"])));
        }
        if (ds->Tables[L"playlists"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlistsDataTable(ds->Tables[L"playlists"])));
        }
        if (ds->Tables[L"playlist"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlistDataTable(ds->Tables[L"playlist"])));
        }
        if (ds->Tables[L"playlist_songs"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlist_songsDataTable(ds->Tables[L"playlist_songs"])));
        }
        if (ds->Tables[L"playlist_song"] != nullptr) {
            __super::Tables->Add((gcnew music_player::playlist_songDataTable(ds->Tables[L"playlist_song"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  music_player::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void music_player::InitVars() {
    this->InitVars(true);
}

inline ::System::Void music_player::InitVars(::System::Boolean initTable) {
    this->tablesongs = (cli::safe_cast<music_player::songsDataTable^  >(__super::Tables[L"songs"]));
    if (initTable == true) {
        if (this->tablesongs != nullptr) {
            this->tablesongs->InitVars();
        }
    }
    this->tablesong = (cli::safe_cast<music_player::songDataTable^  >(__super::Tables[L"song"]));
    if (initTable == true) {
        if (this->tablesong != nullptr) {
            this->tablesong->InitVars();
        }
    }
    this->tablesong_artists = (cli::safe_cast<music_player::song_artistsDataTable^  >(__super::Tables[L"song_artists"]));
    if (initTable == true) {
        if (this->tablesong_artists != nullptr) {
            this->tablesong_artists->InitVars();
        }
    }
    this->tablesong_artist = (cli::safe_cast<music_player::song_artistDataTable^  >(__super::Tables[L"song_artist"]));
    if (initTable == true) {
        if (this->tablesong_artist != nullptr) {
            this->tablesong_artist->InitVars();
        }
    }
    this->tableartists = (cli::safe_cast<music_player::artistsDataTable^  >(__super::Tables[L"artists"]));
    if (initTable == true) {
        if (this->tableartists != nullptr) {
            this->tableartists->InitVars();
        }
    }
    this->tableartist = (cli::safe_cast<music_player::artistDataTable^  >(__super::Tables[L"artist"]));
    if (initTable == true) {
        if (this->tableartist != nullptr) {
            this->tableartist->InitVars();
        }
    }
    this->tableartist_albums = (cli::safe_cast<music_player::artist_albumsDataTable^  >(__super::Tables[L"artist_albums"]));
    if (initTable == true) {
        if (this->tableartist_albums != nullptr) {
            this->tableartist_albums->InitVars();
        }
    }
    this->tableartist_album = (cli::safe_cast<music_player::artist_albumDataTable^  >(__super::Tables[L"artist_album"]));
    if (initTable == true) {
        if (this->tableartist_album != nullptr) {
            this->tableartist_album->InitVars();
        }
    }
    this->tableartist_songs = (cli::safe_cast<music_player::artist_songsDataTable^  >(__super::Tables[L"artist_songs"]));
    if (initTable == true) {
        if (this->tableartist_songs != nullptr) {
            this->tableartist_songs->InitVars();
        }
    }
    this->tableartist_song = (cli::safe_cast<music_player::artist_songDataTable^  >(__super::Tables[L"artist_song"]));
    if (initTable == true) {
        if (this->tableartist_song != nullptr) {
            this->tableartist_song->InitVars();
        }
    }
    this->tablealbums = (cli::safe_cast<music_player::albumsDataTable^  >(__super::Tables[L"albums"]));
    if (initTable == true) {
        if (this->tablealbums != nullptr) {
            this->tablealbums->InitVars();
        }
    }
    this->tablealbum = (cli::safe_cast<music_player::albumDataTable^  >(__super::Tables[L"album"]));
    if (initTable == true) {
        if (this->tablealbum != nullptr) {
            this->tablealbum->InitVars();
        }
    }
    this->tablealbum_artists = (cli::safe_cast<music_player::album_artistsDataTable^  >(__super::Tables[L"album_artists"]));
    if (initTable == true) {
        if (this->tablealbum_artists != nullptr) {
            this->tablealbum_artists->InitVars();
        }
    }
    this->tablealbum_artist = (cli::safe_cast<music_player::album_artistDataTable^  >(__super::Tables[L"album_artist"]));
    if (initTable == true) {
        if (this->tablealbum_artist != nullptr) {
            this->tablealbum_artist->InitVars();
        }
    }
    this->tablealbum_songs = (cli::safe_cast<music_player::album_songsDataTable^  >(__super::Tables[L"album_songs"]));
    if (initTable == true) {
        if (this->tablealbum_songs != nullptr) {
            this->tablealbum_songs->InitVars();
        }
    }
    this->tablealbum_song = (cli::safe_cast<music_player::album_songDataTable^  >(__super::Tables[L"album_song"]));
    if (initTable == true) {
        if (this->tablealbum_song != nullptr) {
            this->tablealbum_song->InitVars();
        }
    }
    this->tableplaylists = (cli::safe_cast<music_player::playlistsDataTable^  >(__super::Tables[L"playlists"]));
    if (initTable == true) {
        if (this->tableplaylists != nullptr) {
            this->tableplaylists->InitVars();
        }
    }
    this->tableplaylist = (cli::safe_cast<music_player::playlistDataTable^  >(__super::Tables[L"playlist"]));
    if (initTable == true) {
        if (this->tableplaylist != nullptr) {
            this->tableplaylist->InitVars();
        }
    }
    this->tableplaylist_songs = (cli::safe_cast<music_player::playlist_songsDataTable^  >(__super::Tables[L"playlist_songs"]));
    if (initTable == true) {
        if (this->tableplaylist_songs != nullptr) {
            this->tableplaylist_songs->InitVars();
        }
    }
    this->tableplaylist_song = (cli::safe_cast<music_player::playlist_songDataTable^  >(__super::Tables[L"playlist_song"]));
    if (initTable == true) {
        if (this->tableplaylist_song != nullptr) {
            this->tableplaylist_song->InitVars();
        }
    }
    this->relationsongs_song = this->Relations[L"songs_song"];
    this->relationsong_song_artists = this->Relations[L"song_song_artists"];
    this->relationsong_artists_song_artist = this->Relations[L"song_artists_song_artist"];
    this->relationartists_artist = this->Relations[L"artists_artist"];
    this->relationartist_artist_albums = this->Relations[L"artist_artist_albums"];
    this->relationartist_albums_artist_album = this->Relations[L"artist_albums_artist_album"];
    this->relationartist_artist_songs = this->Relations[L"artist_artist_songs"];
    this->relationartist_songs_artist_song = this->Relations[L"artist_songs_artist_song"];
    this->relationalbums_album = this->Relations[L"albums_album"];
    this->relationalbum_album_artists = this->Relations[L"album_album_artists"];
    this->relationalbum_artists_album_artist = this->Relations[L"album_artists_album_artist"];
    this->relationalbum_album_songs = this->Relations[L"album_album_songs"];
    this->relationalbum_songs_album_song = this->Relations[L"album_songs_album_song"];
    this->relationplaylists_playlist = this->Relations[L"playlists_playlist"];
    this->relationplaylist_playlist_songs = this->Relations[L"playlist_playlist_songs"];
    this->relationplaylist_songs_playlist_song = this->Relations[L"playlist_songs_playlist_song"];
}

inline ::System::Void music_player::InitClass() {
    this->DataSetName = L"music_player";
    this->Prefix = L"";
    this->Namespace = L"http://tempuri.org/MusicPlayerSchema.xsd";
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tablesongs = (gcnew music_player::songsDataTable());
    __super::Tables->Add(this->tablesongs);
    this->tablesong = (gcnew music_player::songDataTable());
    __super::Tables->Add(this->tablesong);
    this->tablesong_artists = (gcnew music_player::song_artistsDataTable());
    __super::Tables->Add(this->tablesong_artists);
    this->tablesong_artist = (gcnew music_player::song_artistDataTable());
    __super::Tables->Add(this->tablesong_artist);
    this->tableartists = (gcnew music_player::artistsDataTable());
    __super::Tables->Add(this->tableartists);
    this->tableartist = (gcnew music_player::artistDataTable());
    __super::Tables->Add(this->tableartist);
    this->tableartist_albums = (gcnew music_player::artist_albumsDataTable());
    __super::Tables->Add(this->tableartist_albums);
    this->tableartist_album = (gcnew music_player::artist_albumDataTable());
    __super::Tables->Add(this->tableartist_album);
    this->tableartist_songs = (gcnew music_player::artist_songsDataTable());
    __super::Tables->Add(this->tableartist_songs);
    this->tableartist_song = (gcnew music_player::artist_songDataTable());
    __super::Tables->Add(this->tableartist_song);
    this->tablealbums = (gcnew music_player::albumsDataTable());
    __super::Tables->Add(this->tablealbums);
    this->tablealbum = (gcnew music_player::albumDataTable());
    __super::Tables->Add(this->tablealbum);
    this->tablealbum_artists = (gcnew music_player::album_artistsDataTable());
    __super::Tables->Add(this->tablealbum_artists);
    this->tablealbum_artist = (gcnew music_player::album_artistDataTable());
    __super::Tables->Add(this->tablealbum_artist);
    this->tablealbum_songs = (gcnew music_player::album_songsDataTable());
    __super::Tables->Add(this->tablealbum_songs);
    this->tablealbum_song = (gcnew music_player::album_songDataTable());
    __super::Tables->Add(this->tablealbum_song);
    this->tableplaylists = (gcnew music_player::playlistsDataTable());
    __super::Tables->Add(this->tableplaylists);
    this->tableplaylist = (gcnew music_player::playlistDataTable());
    __super::Tables->Add(this->tableplaylist);
    this->tableplaylist_songs = (gcnew music_player::playlist_songsDataTable());
    __super::Tables->Add(this->tableplaylist_songs);
    this->tableplaylist_song = (gcnew music_player::playlist_songDataTable());
    __super::Tables->Add(this->tableplaylist_song);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"songs_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesongs->songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong->songs_IdColumn}));
    this->tablesong->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"song_song_artists", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong->song_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong_artists->song_IdColumn}));
    this->tablesong_artists->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"song_artists_song_artist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong_artists->song_artists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong_artist->song_artists_IdColumn}));
    this->tablesong_artist->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"artists_artist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartists->artists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist->artists_IdColumn}));
    this->tableartist->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"artist_artist_albums", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist->artist_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_albums->artist_IdColumn}));
    this->tableartist_albums->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"artist_albums_artist_album", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_albums->artist_albums_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_album->artist_albums_IdColumn}));
    this->tableartist_album->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"artist_artist_songs", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist->artist_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_songs->artist_IdColumn}));
    this->tableartist_songs->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"artist_songs_artist_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_songs->artist_songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_song->artist_songs_IdColumn}));
    this->tableartist_song->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"albums_album", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbums->albums_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum->albums_IdColumn}));
    this->tablealbum->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"album_album_artists", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum->album_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_artists->album_IdColumn}));
    this->tablealbum_artists->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"album_artists_album_artist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_artists->album_artists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_artist->album_artists_IdColumn}));
    this->tablealbum_artist->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"album_album_songs", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum->album_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_songs->album_IdColumn}));
    this->tablealbum_songs->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"album_songs_album_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_songs->album_songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_song->album_songs_IdColumn}));
    this->tablealbum_song->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"playlists_playlist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylists->playlists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist->playlists_IdColumn}));
    this->tableplaylist->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"playlist_playlist_songs", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist->playlist_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist_songs->playlist_IdColumn}));
    this->tableplaylist_songs->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"playlist_songs_playlist_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist_songs->playlist_songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist_song->playlist_songs_IdColumn}));
    this->tableplaylist_song->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationsongs_song = (gcnew ::System::Data::DataRelation(L"songs_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesongs->songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong->songs_IdColumn}, false));
    this->relationsongs_song->Nested = true;
    this->Relations->Add(this->relationsongs_song);
    this->relationsong_song_artists = (gcnew ::System::Data::DataRelation(L"song_song_artists", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong->song_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong_artists->song_IdColumn}, false));
    this->relationsong_song_artists->Nested = true;
    this->Relations->Add(this->relationsong_song_artists);
    this->relationsong_artists_song_artist = (gcnew ::System::Data::DataRelation(L"song_artists_song_artist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong_artists->song_artists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesong_artist->song_artists_IdColumn}, false));
    this->relationsong_artists_song_artist->Nested = true;
    this->Relations->Add(this->relationsong_artists_song_artist);
    this->relationartists_artist = (gcnew ::System::Data::DataRelation(L"artists_artist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartists->artists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist->artists_IdColumn}, false));
    this->relationartists_artist->Nested = true;
    this->Relations->Add(this->relationartists_artist);
    this->relationartist_artist_albums = (gcnew ::System::Data::DataRelation(L"artist_artist_albums", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist->artist_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_albums->artist_IdColumn}, false));
    this->relationartist_artist_albums->Nested = true;
    this->Relations->Add(this->relationartist_artist_albums);
    this->relationartist_albums_artist_album = (gcnew ::System::Data::DataRelation(L"artist_albums_artist_album", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_albums->artist_albums_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_album->artist_albums_IdColumn}, false));
    this->relationartist_albums_artist_album->Nested = true;
    this->Relations->Add(this->relationartist_albums_artist_album);
    this->relationartist_artist_songs = (gcnew ::System::Data::DataRelation(L"artist_artist_songs", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist->artist_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_songs->artist_IdColumn}, false));
    this->relationartist_artist_songs->Nested = true;
    this->Relations->Add(this->relationartist_artist_songs);
    this->relationartist_songs_artist_song = (gcnew ::System::Data::DataRelation(L"artist_songs_artist_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_songs->artist_songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableartist_song->artist_songs_IdColumn}, false));
    this->relationartist_songs_artist_song->Nested = true;
    this->Relations->Add(this->relationartist_songs_artist_song);
    this->relationalbums_album = (gcnew ::System::Data::DataRelation(L"albums_album", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbums->albums_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum->albums_IdColumn}, false));
    this->relationalbums_album->Nested = true;
    this->Relations->Add(this->relationalbums_album);
    this->relationalbum_album_artists = (gcnew ::System::Data::DataRelation(L"album_album_artists", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum->album_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_artists->album_IdColumn}, false));
    this->relationalbum_album_artists->Nested = true;
    this->Relations->Add(this->relationalbum_album_artists);
    this->relationalbum_artists_album_artist = (gcnew ::System::Data::DataRelation(L"album_artists_album_artist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_artists->album_artists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_artist->album_artists_IdColumn}, false));
    this->relationalbum_artists_album_artist->Nested = true;
    this->Relations->Add(this->relationalbum_artists_album_artist);
    this->relationalbum_album_songs = (gcnew ::System::Data::DataRelation(L"album_album_songs", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum->album_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_songs->album_IdColumn}, false));
    this->relationalbum_album_songs->Nested = true;
    this->Relations->Add(this->relationalbum_album_songs);
    this->relationalbum_songs_album_song = (gcnew ::System::Data::DataRelation(L"album_songs_album_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_songs->album_songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablealbum_song->album_songs_IdColumn}, false));
    this->relationalbum_songs_album_song->Nested = true;
    this->Relations->Add(this->relationalbum_songs_album_song);
    this->relationplaylists_playlist = (gcnew ::System::Data::DataRelation(L"playlists_playlist", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylists->playlists_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist->playlists_IdColumn}, false));
    this->relationplaylists_playlist->Nested = true;
    this->Relations->Add(this->relationplaylists_playlist);
    this->relationplaylist_playlist_songs = (gcnew ::System::Data::DataRelation(L"playlist_playlist_songs", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist->playlist_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist_songs->playlist_IdColumn}, false));
    this->relationplaylist_playlist_songs->Nested = true;
    this->Relations->Add(this->relationplaylist_playlist_songs);
    this->relationplaylist_songs_playlist_song = (gcnew ::System::Data::DataRelation(L"playlist_songs_playlist_song", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist_songs->playlist_songs_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableplaylist_song->playlist_songs_IdColumn}, false));
    this->relationplaylist_songs_playlist_song->Nested = true;
    this->Relations->Add(this->relationplaylist_songs_playlist_song);
}

inline ::System::Boolean music_player::ShouldSerializesongs() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializesong() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializesong_artists() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializesong_artist() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeartists() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeartist() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeartist_albums() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeartist_album() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeartist_songs() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeartist_song() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializealbums() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializealbum() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializealbum_artists() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializealbum_artist() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializealbum_songs() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializealbum_song() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeplaylists() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeplaylist() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeplaylist_songs() {
    return false;
}

inline ::System::Boolean music_player::ShouldSerializeplaylist_song() {
    return false;
}

inline ::System::Void music_player::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::songsDataTable::songsDataTable() {
    this->TableName = L"songs";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::songsDataTable::songsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::songsDataTable::songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::songsDataTable::songs_IdColumn::get() {
    return this->columnsongs_Id;
}

inline ::System::Int32 music_player::songsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::songsRow^  music_player::songsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::songsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::songsDataTable::AddsongsRow(music_player::songsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::songsRow^  music_player::songsDataTable::AddsongsRow() {
    music_player::songsRow^  rowsongsRow = (cli::safe_cast<music_player::songsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowsongsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsongsRow);
    return rowsongsRow;
}

inline ::System::Collections::IEnumerator^  music_player::songsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::songsDataTable::Clone() {
    music_player::songsDataTable^  cln = (cli::safe_cast<music_player::songsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::songsDataTable::CreateInstance() {
    return (gcnew music_player::songsDataTable());
}

inline ::System::Void music_player::songsDataTable::InitVars() {
    this->columnsongs_Id = __super::Columns[L"songs_Id"];
}

inline ::System::Void music_player::songsDataTable::InitClass() {
    this->columnsongs_Id = (gcnew ::System::Data::DataColumn(L"songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsongs_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnsongs_Id}, 
            true)));
    this->columnsongs_Id->AutoIncrement = true;
    this->columnsongs_Id->AllowDBNull = false;
    this->columnsongs_Id->Unique = true;
}

inline music_player::songsRow^  music_player::songsDataTable::NewsongsRow() {
    return (cli::safe_cast<music_player::songsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::songsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::songsRow(builder));
}

inline ::System::Type^  music_player::songsDataTable::GetRowType() {
    return music_player::songsRow::typeid;
}

inline ::System::Void music_player::songsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->songsRowChanged(this, (gcnew music_player::songsRowChangeEvent((cli::safe_cast<music_player::songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->songsRowChanging(this, (gcnew music_player::songsRowChangeEvent((cli::safe_cast<music_player::songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->songsRowDeleted(this, (gcnew music_player::songsRowChangeEvent((cli::safe_cast<music_player::songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->songsRowDeleting(this, (gcnew music_player::songsRowChangeEvent((cli::safe_cast<music_player::songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songsDataTable::RemovesongsRow(music_player::songsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::songsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"songsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::songDataTable::songDataTable() {
    this->TableName = L"song";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::songDataTable::songDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::songDataTable::songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::songDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  music_player::songDataTable::song_nameColumn::get() {
    return this->columnsong_name;
}

inline ::System::Data::DataColumn^  music_player::songDataTable::durationColumn::get() {
    return this->columnduration;
}

inline ::System::Data::DataColumn^  music_player::songDataTable::song_albumColumn::get() {
    return this->columnsong_album;
}

inline ::System::Data::DataColumn^  music_player::songDataTable::song_IdColumn::get() {
    return this->columnsong_Id;
}

inline ::System::Data::DataColumn^  music_player::songDataTable::songs_IdColumn::get() {
    return this->columnsongs_Id;
}

inline ::System::Int32 music_player::songDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::songRow^  music_player::songDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::songRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::songDataTable::AddsongRow(music_player::songRow^  row) {
    this->Rows->Add(row);
}

inline music_player::songRow^  music_player::songDataTable::AddsongRow(System::String^  ID, System::String^  song_name, System::String^  duration, 
            System::String^  song_album, music_player::songsRow^  parentsongsRowBysongs_song) {
    music_player::songRow^  rowsongRow = (cli::safe_cast<music_player::songRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {ID, song_name, duration, 
        song_album, nullptr, nullptr};
    if (parentsongsRowBysongs_song != nullptr) {
        columnValuesArray[5] = parentsongsRowBysongs_song[0];
    }
    rowsongRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsongRow);
    return rowsongRow;
}

inline ::System::Collections::IEnumerator^  music_player::songDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::songDataTable::Clone() {
    music_player::songDataTable^  cln = (cli::safe_cast<music_player::songDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::songDataTable::CreateInstance() {
    return (gcnew music_player::songDataTable());
}

inline ::System::Void music_player::songDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnsong_name = __super::Columns[L"song_name"];
    this->columnduration = __super::Columns[L"duration"];
    this->columnsong_album = __super::Columns[L"song_album"];
    this->columnsong_Id = __super::Columns[L"song_Id"];
    this->columnsongs_Id = __super::Columns[L"songs_Id"];
}

inline ::System::Void music_player::songDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnsong_name = (gcnew ::System::Data::DataColumn(L"song_name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnsong_name);
    this->columnduration = (gcnew ::System::Data::DataColumn(L"duration", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnduration);
    this->columnsong_album = (gcnew ::System::Data::DataColumn(L"song_album", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnsong_album);
    this->columnsong_Id = (gcnew ::System::Data::DataColumn(L"song_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsong_Id);
    this->columnsongs_Id = (gcnew ::System::Data::DataColumn(L"songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsongs_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnsong_Id}, 
            true)));
    this->columnID->AllowDBNull = false;
    this->columnID->Namespace = L"";
    this->columnsong_name->AllowDBNull = false;
    this->columnduration->AllowDBNull = false;
    this->columnsong_album->AllowDBNull = false;
    this->columnsong_Id->AutoIncrement = true;
    this->columnsong_Id->AllowDBNull = false;
    this->columnsong_Id->Unique = true;
}

inline music_player::songRow^  music_player::songDataTable::NewsongRow() {
    return (cli::safe_cast<music_player::songRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::songDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::songRow(builder));
}

inline ::System::Type^  music_player::songDataTable::GetRowType() {
    return music_player::songRow::typeid;
}

inline ::System::Void music_player::songDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->songRowChanged(this, (gcnew music_player::songRowChangeEvent((cli::safe_cast<music_player::songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->songRowChanging(this, (gcnew music_player::songRowChangeEvent((cli::safe_cast<music_player::songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->songRowDeleted(this, (gcnew music_player::songRowChangeEvent((cli::safe_cast<music_player::songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->songRowDeleting(this, (gcnew music_player::songRowChangeEvent((cli::safe_cast<music_player::songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::songDataTable::RemovesongRow(music_player::songRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::songDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"songDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::song_artistsDataTable::song_artistsDataTable() {
    this->TableName = L"song_artists";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::song_artistsDataTable::song_artistsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::song_artistsDataTable::song_artistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::song_artistsDataTable::song_artists_IdColumn::get() {
    return this->columnsong_artists_Id;
}

inline ::System::Data::DataColumn^  music_player::song_artistsDataTable::song_IdColumn::get() {
    return this->columnsong_Id;
}

inline ::System::Int32 music_player::song_artistsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::song_artistsRow^  music_player::song_artistsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::song_artistsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::song_artistsDataTable::Addsong_artistsRow(music_player::song_artistsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::song_artistsRow^  music_player::song_artistsDataTable::Addsong_artistsRow(music_player::songRow^  parentsongRowBysong_song_artists) {
    music_player::song_artistsRow^  rowsong_artistsRow = (cli::safe_cast<music_player::song_artistsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentsongRowBysong_song_artists != nullptr) {
        columnValuesArray[1] = parentsongRowBysong_song_artists[4];
    }
    rowsong_artistsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsong_artistsRow);
    return rowsong_artistsRow;
}

inline ::System::Collections::IEnumerator^  music_player::song_artistsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::song_artistsDataTable::Clone() {
    music_player::song_artistsDataTable^  cln = (cli::safe_cast<music_player::song_artistsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::song_artistsDataTable::CreateInstance() {
    return (gcnew music_player::song_artistsDataTable());
}

inline ::System::Void music_player::song_artistsDataTable::InitVars() {
    this->columnsong_artists_Id = __super::Columns[L"song_artists_Id"];
    this->columnsong_Id = __super::Columns[L"song_Id"];
}

inline ::System::Void music_player::song_artistsDataTable::InitClass() {
    this->columnsong_artists_Id = (gcnew ::System::Data::DataColumn(L"song_artists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsong_artists_Id);
    this->columnsong_Id = (gcnew ::System::Data::DataColumn(L"song_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsong_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnsong_artists_Id}, 
            true)));
    this->columnsong_artists_Id->AutoIncrement = true;
    this->columnsong_artists_Id->AllowDBNull = false;
    this->columnsong_artists_Id->Unique = true;
}

inline music_player::song_artistsRow^  music_player::song_artistsDataTable::Newsong_artistsRow() {
    return (cli::safe_cast<music_player::song_artistsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::song_artistsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::song_artistsRow(builder));
}

inline ::System::Type^  music_player::song_artistsDataTable::GetRowType() {
    return music_player::song_artistsRow::typeid;
}

inline ::System::Void music_player::song_artistsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->song_artistsRowChanged(this, (gcnew music_player::song_artistsRowChangeEvent((cli::safe_cast<music_player::song_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->song_artistsRowChanging(this, (gcnew music_player::song_artistsRowChangeEvent((cli::safe_cast<music_player::song_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->song_artistsRowDeleted(this, (gcnew music_player::song_artistsRowChangeEvent((cli::safe_cast<music_player::song_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->song_artistsRowDeleting(this, (gcnew music_player::song_artistsRowChangeEvent((cli::safe_cast<music_player::song_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistsDataTable::Removesong_artistsRow(music_player::song_artistsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::song_artistsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"song_artistsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::song_artistDataTable::song_artistDataTable() {
    this->TableName = L"song_artist";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::song_artistDataTable::song_artistDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::song_artistDataTable::song_artistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::song_artistDataTable::song_artist_ColumnColumn::get() {
    return this->columnsong_artist_Column;
}

inline ::System::Data::DataColumn^  music_player::song_artistDataTable::song_artists_IdColumn::get() {
    return this->columnsong_artists_Id;
}

inline ::System::Int32 music_player::song_artistDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::song_artistRow^  music_player::song_artistDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::song_artistRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::song_artistDataTable::Addsong_artistRow(music_player::song_artistRow^  row) {
    this->Rows->Add(row);
}

inline music_player::song_artistRow^  music_player::song_artistDataTable::Addsong_artistRow(System::String^  song_artist_Column, 
            music_player::song_artistsRow^  parentsong_artistsRowBysong_artists_song_artist) {
    music_player::song_artistRow^  rowsong_artistRow = (cli::safe_cast<music_player::song_artistRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {song_artist_Column, nullptr};
    if (parentsong_artistsRowBysong_artists_song_artist != nullptr) {
        columnValuesArray[1] = parentsong_artistsRowBysong_artists_song_artist[0];
    }
    rowsong_artistRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsong_artistRow);
    return rowsong_artistRow;
}

inline ::System::Collections::IEnumerator^  music_player::song_artistDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::song_artistDataTable::Clone() {
    music_player::song_artistDataTable^  cln = (cli::safe_cast<music_player::song_artistDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::song_artistDataTable::CreateInstance() {
    return (gcnew music_player::song_artistDataTable());
}

inline ::System::Void music_player::song_artistDataTable::InitVars() {
    this->columnsong_artist_Column = __super::Columns[L"song_artist_Column"];
    this->columnsong_artists_Id = __super::Columns[L"song_artists_Id"];
}

inline ::System::Void music_player::song_artistDataTable::InitClass() {
    this->columnsong_artist_Column = (gcnew ::System::Data::DataColumn(L"song_artist_Column", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnsong_artist_Column);
    this->columnsong_artists_Id = (gcnew ::System::Data::DataColumn(L"song_artists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsong_artists_Id);
}

inline music_player::song_artistRow^  music_player::song_artistDataTable::Newsong_artistRow() {
    return (cli::safe_cast<music_player::song_artistRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::song_artistDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::song_artistRow(builder));
}

inline ::System::Type^  music_player::song_artistDataTable::GetRowType() {
    return music_player::song_artistRow::typeid;
}

inline ::System::Void music_player::song_artistDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->song_artistRowChanged(this, (gcnew music_player::song_artistRowChangeEvent((cli::safe_cast<music_player::song_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->song_artistRowChanging(this, (gcnew music_player::song_artistRowChangeEvent((cli::safe_cast<music_player::song_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->song_artistRowDeleted(this, (gcnew music_player::song_artistRowChangeEvent((cli::safe_cast<music_player::song_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->song_artistRowDeleting(this, (gcnew music_player::song_artistRowChangeEvent((cli::safe_cast<music_player::song_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::song_artistDataTable::Removesong_artistRow(music_player::song_artistRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::song_artistDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"song_artistDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::artistsDataTable::artistsDataTable() {
    this->TableName = L"artists";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::artistsDataTable::artistsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::artistsDataTable::artistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::artistsDataTable::artists_IdColumn::get() {
    return this->columnartists_Id;
}

inline ::System::Int32 music_player::artistsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::artistsRow^  music_player::artistsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::artistsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::artistsDataTable::AddartistsRow(music_player::artistsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::artistsRow^  music_player::artistsDataTable::AddartistsRow() {
    music_player::artistsRow^  rowartistsRow = (cli::safe_cast<music_player::artistsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowartistsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowartistsRow);
    return rowartistsRow;
}

inline ::System::Collections::IEnumerator^  music_player::artistsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::artistsDataTable::Clone() {
    music_player::artistsDataTable^  cln = (cli::safe_cast<music_player::artistsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::artistsDataTable::CreateInstance() {
    return (gcnew music_player::artistsDataTable());
}

inline ::System::Void music_player::artistsDataTable::InitVars() {
    this->columnartists_Id = __super::Columns[L"artists_Id"];
}

inline ::System::Void music_player::artistsDataTable::InitClass() {
    this->columnartists_Id = (gcnew ::System::Data::DataColumn(L"artists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartists_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnartists_Id}, 
            true)));
    this->columnartists_Id->AutoIncrement = true;
    this->columnartists_Id->AllowDBNull = false;
    this->columnartists_Id->Unique = true;
}

inline music_player::artistsRow^  music_player::artistsDataTable::NewartistsRow() {
    return (cli::safe_cast<music_player::artistsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::artistsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::artistsRow(builder));
}

inline ::System::Type^  music_player::artistsDataTable::GetRowType() {
    return music_player::artistsRow::typeid;
}

inline ::System::Void music_player::artistsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->artistsRowChanged(this, (gcnew music_player::artistsRowChangeEvent((cli::safe_cast<music_player::artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->artistsRowChanging(this, (gcnew music_player::artistsRowChangeEvent((cli::safe_cast<music_player::artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->artistsRowDeleted(this, (gcnew music_player::artistsRowChangeEvent((cli::safe_cast<music_player::artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->artistsRowDeleting(this, (gcnew music_player::artistsRowChangeEvent((cli::safe_cast<music_player::artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistsDataTable::RemoveartistsRow(music_player::artistsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::artistsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"artistsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::artistDataTable::artistDataTable() {
    this->TableName = L"artist";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::artistDataTable::artistDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::artistDataTable::artistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::artistDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  music_player::artistDataTable::artist_nameColumn::get() {
    return this->columnartist_name;
}

inline ::System::Data::DataColumn^  music_player::artistDataTable::artist_IdColumn::get() {
    return this->columnartist_Id;
}

inline ::System::Data::DataColumn^  music_player::artistDataTable::artists_IdColumn::get() {
    return this->columnartists_Id;
}

inline ::System::Int32 music_player::artistDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::artistRow^  music_player::artistDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::artistRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::artistDataTable::AddartistRow(music_player::artistRow^  row) {
    this->Rows->Add(row);
}

inline music_player::artistRow^  music_player::artistDataTable::AddartistRow(System::String^  ID, System::String^  artist_name, 
            music_player::artistsRow^  parentartistsRowByartists_artist) {
    music_player::artistRow^  rowartistRow = (cli::safe_cast<music_player::artistRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {ID, artist_name, nullptr, 
        nullptr};
    if (parentartistsRowByartists_artist != nullptr) {
        columnValuesArray[3] = parentartistsRowByartists_artist[0];
    }
    rowartistRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowartistRow);
    return rowartistRow;
}

inline ::System::Collections::IEnumerator^  music_player::artistDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::artistDataTable::Clone() {
    music_player::artistDataTable^  cln = (cli::safe_cast<music_player::artistDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::artistDataTable::CreateInstance() {
    return (gcnew music_player::artistDataTable());
}

inline ::System::Void music_player::artistDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnartist_name = __super::Columns[L"artist_name"];
    this->columnartist_Id = __super::Columns[L"artist_Id"];
    this->columnartists_Id = __super::Columns[L"artists_Id"];
}

inline ::System::Void music_player::artistDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnartist_name = (gcnew ::System::Data::DataColumn(L"artist_name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnartist_name);
    this->columnartist_Id = (gcnew ::System::Data::DataColumn(L"artist_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartist_Id);
    this->columnartists_Id = (gcnew ::System::Data::DataColumn(L"artists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartists_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnartist_Id}, 
            true)));
    this->columnID->AllowDBNull = false;
    this->columnID->Namespace = L"";
    this->columnartist_name->AllowDBNull = false;
    this->columnartist_Id->AutoIncrement = true;
    this->columnartist_Id->AllowDBNull = false;
    this->columnartist_Id->Unique = true;
}

inline music_player::artistRow^  music_player::artistDataTable::NewartistRow() {
    return (cli::safe_cast<music_player::artistRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::artistDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::artistRow(builder));
}

inline ::System::Type^  music_player::artistDataTable::GetRowType() {
    return music_player::artistRow::typeid;
}

inline ::System::Void music_player::artistDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->artistRowChanged(this, (gcnew music_player::artistRowChangeEvent((cli::safe_cast<music_player::artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->artistRowChanging(this, (gcnew music_player::artistRowChangeEvent((cli::safe_cast<music_player::artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->artistRowDeleted(this, (gcnew music_player::artistRowChangeEvent((cli::safe_cast<music_player::artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->artistRowDeleting(this, (gcnew music_player::artistRowChangeEvent((cli::safe_cast<music_player::artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artistDataTable::RemoveartistRow(music_player::artistRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::artistDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"artistDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::artist_albumsDataTable::artist_albumsDataTable() {
    this->TableName = L"artist_albums";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::artist_albumsDataTable::artist_albumsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::artist_albumsDataTable::artist_albumsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::artist_albumsDataTable::artist_albums_IdColumn::get() {
    return this->columnartist_albums_Id;
}

inline ::System::Data::DataColumn^  music_player::artist_albumsDataTable::artist_IdColumn::get() {
    return this->columnartist_Id;
}

inline ::System::Int32 music_player::artist_albumsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::artist_albumsRow^  music_player::artist_albumsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::artist_albumsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::artist_albumsDataTable::Addartist_albumsRow(music_player::artist_albumsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::artist_albumsRow^  music_player::artist_albumsDataTable::Addartist_albumsRow(music_player::artistRow^  parentartistRowByartist_artist_albums) {
    music_player::artist_albumsRow^  rowartist_albumsRow = (cli::safe_cast<music_player::artist_albumsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentartistRowByartist_artist_albums != nullptr) {
        columnValuesArray[1] = parentartistRowByartist_artist_albums[2];
    }
    rowartist_albumsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowartist_albumsRow);
    return rowartist_albumsRow;
}

inline ::System::Collections::IEnumerator^  music_player::artist_albumsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::artist_albumsDataTable::Clone() {
    music_player::artist_albumsDataTable^  cln = (cli::safe_cast<music_player::artist_albumsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::artist_albumsDataTable::CreateInstance() {
    return (gcnew music_player::artist_albumsDataTable());
}

inline ::System::Void music_player::artist_albumsDataTable::InitVars() {
    this->columnartist_albums_Id = __super::Columns[L"artist_albums_Id"];
    this->columnartist_Id = __super::Columns[L"artist_Id"];
}

inline ::System::Void music_player::artist_albumsDataTable::InitClass() {
    this->columnartist_albums_Id = (gcnew ::System::Data::DataColumn(L"artist_albums_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartist_albums_Id);
    this->columnartist_Id = (gcnew ::System::Data::DataColumn(L"artist_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartist_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnartist_albums_Id}, 
            true)));
    this->columnartist_albums_Id->AutoIncrement = true;
    this->columnartist_albums_Id->AllowDBNull = false;
    this->columnartist_albums_Id->Unique = true;
}

inline music_player::artist_albumsRow^  music_player::artist_albumsDataTable::Newartist_albumsRow() {
    return (cli::safe_cast<music_player::artist_albumsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::artist_albumsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::artist_albumsRow(builder));
}

inline ::System::Type^  music_player::artist_albumsDataTable::GetRowType() {
    return music_player::artist_albumsRow::typeid;
}

inline ::System::Void music_player::artist_albumsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->artist_albumsRowChanged(this, (gcnew music_player::artist_albumsRowChangeEvent((cli::safe_cast<music_player::artist_albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->artist_albumsRowChanging(this, (gcnew music_player::artist_albumsRowChangeEvent((cli::safe_cast<music_player::artist_albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->artist_albumsRowDeleted(this, (gcnew music_player::artist_albumsRowChangeEvent((cli::safe_cast<music_player::artist_albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->artist_albumsRowDeleting(this, (gcnew music_player::artist_albumsRowChangeEvent((cli::safe_cast<music_player::artist_albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumsDataTable::Removeartist_albumsRow(music_player::artist_albumsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::artist_albumsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"artist_albumsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::artist_albumDataTable::artist_albumDataTable() {
    this->TableName = L"artist_album";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::artist_albumDataTable::artist_albumDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::artist_albumDataTable::artist_albumDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::artist_albumDataTable::artist_album_ColumnColumn::get() {
    return this->columnartist_album_Column;
}

inline ::System::Data::DataColumn^  music_player::artist_albumDataTable::artist_albums_IdColumn::get() {
    return this->columnartist_albums_Id;
}

inline ::System::Int32 music_player::artist_albumDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::artist_albumRow^  music_player::artist_albumDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::artist_albumRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::artist_albumDataTable::Addartist_albumRow(music_player::artist_albumRow^  row) {
    this->Rows->Add(row);
}

inline music_player::artist_albumRow^  music_player::artist_albumDataTable::Addartist_albumRow(System::String^  artist_album_Column, 
            music_player::artist_albumsRow^  parentartist_albumsRowByartist_albums_artist_album) {
    music_player::artist_albumRow^  rowartist_albumRow = (cli::safe_cast<music_player::artist_albumRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {artist_album_Column, nullptr};
    if (parentartist_albumsRowByartist_albums_artist_album != nullptr) {
        columnValuesArray[1] = parentartist_albumsRowByartist_albums_artist_album[0];
    }
    rowartist_albumRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowartist_albumRow);
    return rowartist_albumRow;
}

inline ::System::Collections::IEnumerator^  music_player::artist_albumDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::artist_albumDataTable::Clone() {
    music_player::artist_albumDataTable^  cln = (cli::safe_cast<music_player::artist_albumDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::artist_albumDataTable::CreateInstance() {
    return (gcnew music_player::artist_albumDataTable());
}

inline ::System::Void music_player::artist_albumDataTable::InitVars() {
    this->columnartist_album_Column = __super::Columns[L"artist_album_Column"];
    this->columnartist_albums_Id = __super::Columns[L"artist_albums_Id"];
}

inline ::System::Void music_player::artist_albumDataTable::InitClass() {
    this->columnartist_album_Column = (gcnew ::System::Data::DataColumn(L"artist_album_Column", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnartist_album_Column);
    this->columnartist_albums_Id = (gcnew ::System::Data::DataColumn(L"artist_albums_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartist_albums_Id);
}

inline music_player::artist_albumRow^  music_player::artist_albumDataTable::Newartist_albumRow() {
    return (cli::safe_cast<music_player::artist_albumRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::artist_albumDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::artist_albumRow(builder));
}

inline ::System::Type^  music_player::artist_albumDataTable::GetRowType() {
    return music_player::artist_albumRow::typeid;
}

inline ::System::Void music_player::artist_albumDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->artist_albumRowChanged(this, (gcnew music_player::artist_albumRowChangeEvent((cli::safe_cast<music_player::artist_albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->artist_albumRowChanging(this, (gcnew music_player::artist_albumRowChangeEvent((cli::safe_cast<music_player::artist_albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->artist_albumRowDeleted(this, (gcnew music_player::artist_albumRowChangeEvent((cli::safe_cast<music_player::artist_albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->artist_albumRowDeleting(this, (gcnew music_player::artist_albumRowChangeEvent((cli::safe_cast<music_player::artist_albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_albumDataTable::Removeartist_albumRow(music_player::artist_albumRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::artist_albumDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"artist_albumDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::artist_songsDataTable::artist_songsDataTable() {
    this->TableName = L"artist_songs";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::artist_songsDataTable::artist_songsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::artist_songsDataTable::artist_songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::artist_songsDataTable::artist_songs_IdColumn::get() {
    return this->columnartist_songs_Id;
}

inline ::System::Data::DataColumn^  music_player::artist_songsDataTable::artist_IdColumn::get() {
    return this->columnartist_Id;
}

inline ::System::Int32 music_player::artist_songsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::artist_songsRow^  music_player::artist_songsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::artist_songsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::artist_songsDataTable::Addartist_songsRow(music_player::artist_songsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::artist_songsRow^  music_player::artist_songsDataTable::Addartist_songsRow(music_player::artistRow^  parentartistRowByartist_artist_songs) {
    music_player::artist_songsRow^  rowartist_songsRow = (cli::safe_cast<music_player::artist_songsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentartistRowByartist_artist_songs != nullptr) {
        columnValuesArray[1] = parentartistRowByartist_artist_songs[2];
    }
    rowartist_songsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowartist_songsRow);
    return rowartist_songsRow;
}

inline ::System::Collections::IEnumerator^  music_player::artist_songsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::artist_songsDataTable::Clone() {
    music_player::artist_songsDataTable^  cln = (cli::safe_cast<music_player::artist_songsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::artist_songsDataTable::CreateInstance() {
    return (gcnew music_player::artist_songsDataTable());
}

inline ::System::Void music_player::artist_songsDataTable::InitVars() {
    this->columnartist_songs_Id = __super::Columns[L"artist_songs_Id"];
    this->columnartist_Id = __super::Columns[L"artist_Id"];
}

inline ::System::Void music_player::artist_songsDataTable::InitClass() {
    this->columnartist_songs_Id = (gcnew ::System::Data::DataColumn(L"artist_songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartist_songs_Id);
    this->columnartist_Id = (gcnew ::System::Data::DataColumn(L"artist_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartist_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnartist_songs_Id}, 
            true)));
    this->columnartist_songs_Id->AutoIncrement = true;
    this->columnartist_songs_Id->AllowDBNull = false;
    this->columnartist_songs_Id->Unique = true;
}

inline music_player::artist_songsRow^  music_player::artist_songsDataTable::Newartist_songsRow() {
    return (cli::safe_cast<music_player::artist_songsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::artist_songsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::artist_songsRow(builder));
}

inline ::System::Type^  music_player::artist_songsDataTable::GetRowType() {
    return music_player::artist_songsRow::typeid;
}

inline ::System::Void music_player::artist_songsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->artist_songsRowChanged(this, (gcnew music_player::artist_songsRowChangeEvent((cli::safe_cast<music_player::artist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->artist_songsRowChanging(this, (gcnew music_player::artist_songsRowChangeEvent((cli::safe_cast<music_player::artist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->artist_songsRowDeleted(this, (gcnew music_player::artist_songsRowChangeEvent((cli::safe_cast<music_player::artist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->artist_songsRowDeleting(this, (gcnew music_player::artist_songsRowChangeEvent((cli::safe_cast<music_player::artist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songsDataTable::Removeartist_songsRow(music_player::artist_songsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::artist_songsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"artist_songsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::artist_songDataTable::artist_songDataTable() {
    this->TableName = L"artist_song";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::artist_songDataTable::artist_songDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::artist_songDataTable::artist_songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::artist_songDataTable::artist_song_ColumnColumn::get() {
    return this->columnartist_song_Column;
}

inline ::System::Data::DataColumn^  music_player::artist_songDataTable::artist_songs_IdColumn::get() {
    return this->columnartist_songs_Id;
}

inline ::System::Int32 music_player::artist_songDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::artist_songRow^  music_player::artist_songDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::artist_songRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::artist_songDataTable::Addartist_songRow(music_player::artist_songRow^  row) {
    this->Rows->Add(row);
}

inline music_player::artist_songRow^  music_player::artist_songDataTable::Addartist_songRow(System::String^  artist_song_Column, 
            music_player::artist_songsRow^  parentartist_songsRowByartist_songs_artist_song) {
    music_player::artist_songRow^  rowartist_songRow = (cli::safe_cast<music_player::artist_songRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {artist_song_Column, nullptr};
    if (parentartist_songsRowByartist_songs_artist_song != nullptr) {
        columnValuesArray[1] = parentartist_songsRowByartist_songs_artist_song[0];
    }
    rowartist_songRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowartist_songRow);
    return rowartist_songRow;
}

inline ::System::Collections::IEnumerator^  music_player::artist_songDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::artist_songDataTable::Clone() {
    music_player::artist_songDataTable^  cln = (cli::safe_cast<music_player::artist_songDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::artist_songDataTable::CreateInstance() {
    return (gcnew music_player::artist_songDataTable());
}

inline ::System::Void music_player::artist_songDataTable::InitVars() {
    this->columnartist_song_Column = __super::Columns[L"artist_song_Column"];
    this->columnartist_songs_Id = __super::Columns[L"artist_songs_Id"];
}

inline ::System::Void music_player::artist_songDataTable::InitClass() {
    this->columnartist_song_Column = (gcnew ::System::Data::DataColumn(L"artist_song_Column", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnartist_song_Column);
    this->columnartist_songs_Id = (gcnew ::System::Data::DataColumn(L"artist_songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnartist_songs_Id);
}

inline music_player::artist_songRow^  music_player::artist_songDataTable::Newartist_songRow() {
    return (cli::safe_cast<music_player::artist_songRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::artist_songDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::artist_songRow(builder));
}

inline ::System::Type^  music_player::artist_songDataTable::GetRowType() {
    return music_player::artist_songRow::typeid;
}

inline ::System::Void music_player::artist_songDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->artist_songRowChanged(this, (gcnew music_player::artist_songRowChangeEvent((cli::safe_cast<music_player::artist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->artist_songRowChanging(this, (gcnew music_player::artist_songRowChangeEvent((cli::safe_cast<music_player::artist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->artist_songRowDeleted(this, (gcnew music_player::artist_songRowChangeEvent((cli::safe_cast<music_player::artist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->artist_songRowDeleting(this, (gcnew music_player::artist_songRowChangeEvent((cli::safe_cast<music_player::artist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::artist_songDataTable::Removeartist_songRow(music_player::artist_songRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::artist_songDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"artist_songDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::albumsDataTable::albumsDataTable() {
    this->TableName = L"albums";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::albumsDataTable::albumsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::albumsDataTable::albumsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::albumsDataTable::albums_IdColumn::get() {
    return this->columnalbums_Id;
}

inline ::System::Int32 music_player::albumsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::albumsRow^  music_player::albumsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::albumsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::albumsDataTable::AddalbumsRow(music_player::albumsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::albumsRow^  music_player::albumsDataTable::AddalbumsRow() {
    music_player::albumsRow^  rowalbumsRow = (cli::safe_cast<music_player::albumsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowalbumsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowalbumsRow);
    return rowalbumsRow;
}

inline ::System::Collections::IEnumerator^  music_player::albumsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::albumsDataTable::Clone() {
    music_player::albumsDataTable^  cln = (cli::safe_cast<music_player::albumsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::albumsDataTable::CreateInstance() {
    return (gcnew music_player::albumsDataTable());
}

inline ::System::Void music_player::albumsDataTable::InitVars() {
    this->columnalbums_Id = __super::Columns[L"albums_Id"];
}

inline ::System::Void music_player::albumsDataTable::InitClass() {
    this->columnalbums_Id = (gcnew ::System::Data::DataColumn(L"albums_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbums_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnalbums_Id}, 
            true)));
    this->columnalbums_Id->AutoIncrement = true;
    this->columnalbums_Id->AllowDBNull = false;
    this->columnalbums_Id->Unique = true;
}

inline music_player::albumsRow^  music_player::albumsDataTable::NewalbumsRow() {
    return (cli::safe_cast<music_player::albumsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::albumsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::albumsRow(builder));
}

inline ::System::Type^  music_player::albumsDataTable::GetRowType() {
    return music_player::albumsRow::typeid;
}

inline ::System::Void music_player::albumsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->albumsRowChanged(this, (gcnew music_player::albumsRowChangeEvent((cli::safe_cast<music_player::albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->albumsRowChanging(this, (gcnew music_player::albumsRowChangeEvent((cli::safe_cast<music_player::albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->albumsRowDeleted(this, (gcnew music_player::albumsRowChangeEvent((cli::safe_cast<music_player::albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->albumsRowDeleting(this, (gcnew music_player::albumsRowChangeEvent((cli::safe_cast<music_player::albumsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumsDataTable::RemovealbumsRow(music_player::albumsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::albumsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"albumsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::albumDataTable::albumDataTable() {
    this->TableName = L"album";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::albumDataTable::albumDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::albumDataTable::albumDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::albumDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  music_player::albumDataTable::album_nameColumn::get() {
    return this->columnalbum_name;
}

inline ::System::Data::DataColumn^  music_player::albumDataTable::album_IdColumn::get() {
    return this->columnalbum_Id;
}

inline ::System::Data::DataColumn^  music_player::albumDataTable::albums_IdColumn::get() {
    return this->columnalbums_Id;
}

inline ::System::Int32 music_player::albumDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::albumRow^  music_player::albumDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::albumRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::albumDataTable::AddalbumRow(music_player::albumRow^  row) {
    this->Rows->Add(row);
}

inline music_player::albumRow^  music_player::albumDataTable::AddalbumRow(System::String^  ID, System::String^  album_name, 
            music_player::albumsRow^  parentalbumsRowByalbums_album) {
    music_player::albumRow^  rowalbumRow = (cli::safe_cast<music_player::albumRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {ID, album_name, nullptr, 
        nullptr};
    if (parentalbumsRowByalbums_album != nullptr) {
        columnValuesArray[3] = parentalbumsRowByalbums_album[0];
    }
    rowalbumRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowalbumRow);
    return rowalbumRow;
}

inline ::System::Collections::IEnumerator^  music_player::albumDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::albumDataTable::Clone() {
    music_player::albumDataTable^  cln = (cli::safe_cast<music_player::albumDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::albumDataTable::CreateInstance() {
    return (gcnew music_player::albumDataTable());
}

inline ::System::Void music_player::albumDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnalbum_name = __super::Columns[L"album_name"];
    this->columnalbum_Id = __super::Columns[L"album_Id"];
    this->columnalbums_Id = __super::Columns[L"albums_Id"];
}

inline ::System::Void music_player::albumDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnalbum_name = (gcnew ::System::Data::DataColumn(L"album_name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnalbum_name);
    this->columnalbum_Id = (gcnew ::System::Data::DataColumn(L"album_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbum_Id);
    this->columnalbums_Id = (gcnew ::System::Data::DataColumn(L"albums_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbums_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnalbum_Id}, 
            true)));
    this->columnID->AllowDBNull = false;
    this->columnID->Namespace = L"";
    this->columnalbum_name->AllowDBNull = false;
    this->columnalbum_Id->AutoIncrement = true;
    this->columnalbum_Id->AllowDBNull = false;
    this->columnalbum_Id->Unique = true;
}

inline music_player::albumRow^  music_player::albumDataTable::NewalbumRow() {
    return (cli::safe_cast<music_player::albumRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::albumDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::albumRow(builder));
}

inline ::System::Type^  music_player::albumDataTable::GetRowType() {
    return music_player::albumRow::typeid;
}

inline ::System::Void music_player::albumDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->albumRowChanged(this, (gcnew music_player::albumRowChangeEvent((cli::safe_cast<music_player::albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->albumRowChanging(this, (gcnew music_player::albumRowChangeEvent((cli::safe_cast<music_player::albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->albumRowDeleted(this, (gcnew music_player::albumRowChangeEvent((cli::safe_cast<music_player::albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->albumRowDeleting(this, (gcnew music_player::albumRowChangeEvent((cli::safe_cast<music_player::albumRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::albumDataTable::RemovealbumRow(music_player::albumRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::albumDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"albumDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::album_artistsDataTable::album_artistsDataTable() {
    this->TableName = L"album_artists";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::album_artistsDataTable::album_artistsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::album_artistsDataTable::album_artistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::album_artistsDataTable::album_artists_IdColumn::get() {
    return this->columnalbum_artists_Id;
}

inline ::System::Data::DataColumn^  music_player::album_artistsDataTable::album_IdColumn::get() {
    return this->columnalbum_Id;
}

inline ::System::Int32 music_player::album_artistsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::album_artistsRow^  music_player::album_artistsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::album_artistsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::album_artistsDataTable::Addalbum_artistsRow(music_player::album_artistsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::album_artistsRow^  music_player::album_artistsDataTable::Addalbum_artistsRow(music_player::albumRow^  parentalbumRowByalbum_album_artists) {
    music_player::album_artistsRow^  rowalbum_artistsRow = (cli::safe_cast<music_player::album_artistsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentalbumRowByalbum_album_artists != nullptr) {
        columnValuesArray[1] = parentalbumRowByalbum_album_artists[2];
    }
    rowalbum_artistsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowalbum_artistsRow);
    return rowalbum_artistsRow;
}

inline ::System::Collections::IEnumerator^  music_player::album_artistsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::album_artistsDataTable::Clone() {
    music_player::album_artistsDataTable^  cln = (cli::safe_cast<music_player::album_artistsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::album_artistsDataTable::CreateInstance() {
    return (gcnew music_player::album_artistsDataTable());
}

inline ::System::Void music_player::album_artistsDataTable::InitVars() {
    this->columnalbum_artists_Id = __super::Columns[L"album_artists_Id"];
    this->columnalbum_Id = __super::Columns[L"album_Id"];
}

inline ::System::Void music_player::album_artistsDataTable::InitClass() {
    this->columnalbum_artists_Id = (gcnew ::System::Data::DataColumn(L"album_artists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbum_artists_Id);
    this->columnalbum_Id = (gcnew ::System::Data::DataColumn(L"album_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbum_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnalbum_artists_Id}, 
            true)));
    this->columnalbum_artists_Id->AutoIncrement = true;
    this->columnalbum_artists_Id->AllowDBNull = false;
    this->columnalbum_artists_Id->Unique = true;
}

inline music_player::album_artistsRow^  music_player::album_artistsDataTable::Newalbum_artistsRow() {
    return (cli::safe_cast<music_player::album_artistsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::album_artistsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::album_artistsRow(builder));
}

inline ::System::Type^  music_player::album_artistsDataTable::GetRowType() {
    return music_player::album_artistsRow::typeid;
}

inline ::System::Void music_player::album_artistsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->album_artistsRowChanged(this, (gcnew music_player::album_artistsRowChangeEvent((cli::safe_cast<music_player::album_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->album_artistsRowChanging(this, (gcnew music_player::album_artistsRowChangeEvent((cli::safe_cast<music_player::album_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->album_artistsRowDeleted(this, (gcnew music_player::album_artistsRowChangeEvent((cli::safe_cast<music_player::album_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->album_artistsRowDeleting(this, (gcnew music_player::album_artistsRowChangeEvent((cli::safe_cast<music_player::album_artistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistsDataTable::Removealbum_artistsRow(music_player::album_artistsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::album_artistsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"album_artistsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::album_artistDataTable::album_artistDataTable() {
    this->TableName = L"album_artist";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::album_artistDataTable::album_artistDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::album_artistDataTable::album_artistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::album_artistDataTable::album_artist_ColumnColumn::get() {
    return this->columnalbum_artist_Column;
}

inline ::System::Data::DataColumn^  music_player::album_artistDataTable::album_artists_IdColumn::get() {
    return this->columnalbum_artists_Id;
}

inline ::System::Int32 music_player::album_artistDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::album_artistRow^  music_player::album_artistDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::album_artistRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::album_artistDataTable::Addalbum_artistRow(music_player::album_artistRow^  row) {
    this->Rows->Add(row);
}

inline music_player::album_artistRow^  music_player::album_artistDataTable::Addalbum_artistRow(System::String^  album_artist_Column, 
            music_player::album_artistsRow^  parentalbum_artistsRowByalbum_artists_album_artist) {
    music_player::album_artistRow^  rowalbum_artistRow = (cli::safe_cast<music_player::album_artistRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {album_artist_Column, nullptr};
    if (parentalbum_artistsRowByalbum_artists_album_artist != nullptr) {
        columnValuesArray[1] = parentalbum_artistsRowByalbum_artists_album_artist[0];
    }
    rowalbum_artistRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowalbum_artistRow);
    return rowalbum_artistRow;
}

inline ::System::Collections::IEnumerator^  music_player::album_artistDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::album_artistDataTable::Clone() {
    music_player::album_artistDataTable^  cln = (cli::safe_cast<music_player::album_artistDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::album_artistDataTable::CreateInstance() {
    return (gcnew music_player::album_artistDataTable());
}

inline ::System::Void music_player::album_artistDataTable::InitVars() {
    this->columnalbum_artist_Column = __super::Columns[L"album_artist_Column"];
    this->columnalbum_artists_Id = __super::Columns[L"album_artists_Id"];
}

inline ::System::Void music_player::album_artistDataTable::InitClass() {
    this->columnalbum_artist_Column = (gcnew ::System::Data::DataColumn(L"album_artist_Column", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnalbum_artist_Column);
    this->columnalbum_artists_Id = (gcnew ::System::Data::DataColumn(L"album_artists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbum_artists_Id);
}

inline music_player::album_artistRow^  music_player::album_artistDataTable::Newalbum_artistRow() {
    return (cli::safe_cast<music_player::album_artistRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::album_artistDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::album_artistRow(builder));
}

inline ::System::Type^  music_player::album_artistDataTable::GetRowType() {
    return music_player::album_artistRow::typeid;
}

inline ::System::Void music_player::album_artistDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->album_artistRowChanged(this, (gcnew music_player::album_artistRowChangeEvent((cli::safe_cast<music_player::album_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->album_artistRowChanging(this, (gcnew music_player::album_artistRowChangeEvent((cli::safe_cast<music_player::album_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->album_artistRowDeleted(this, (gcnew music_player::album_artistRowChangeEvent((cli::safe_cast<music_player::album_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->album_artistRowDeleting(this, (gcnew music_player::album_artistRowChangeEvent((cli::safe_cast<music_player::album_artistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_artistDataTable::Removealbum_artistRow(music_player::album_artistRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::album_artistDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"album_artistDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::album_songsDataTable::album_songsDataTable() {
    this->TableName = L"album_songs";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::album_songsDataTable::album_songsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::album_songsDataTable::album_songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::album_songsDataTable::album_songs_IdColumn::get() {
    return this->columnalbum_songs_Id;
}

inline ::System::Data::DataColumn^  music_player::album_songsDataTable::album_IdColumn::get() {
    return this->columnalbum_Id;
}

inline ::System::Int32 music_player::album_songsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::album_songsRow^  music_player::album_songsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::album_songsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::album_songsDataTable::Addalbum_songsRow(music_player::album_songsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::album_songsRow^  music_player::album_songsDataTable::Addalbum_songsRow(music_player::albumRow^  parentalbumRowByalbum_album_songs) {
    music_player::album_songsRow^  rowalbum_songsRow = (cli::safe_cast<music_player::album_songsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentalbumRowByalbum_album_songs != nullptr) {
        columnValuesArray[1] = parentalbumRowByalbum_album_songs[2];
    }
    rowalbum_songsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowalbum_songsRow);
    return rowalbum_songsRow;
}

inline ::System::Collections::IEnumerator^  music_player::album_songsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::album_songsDataTable::Clone() {
    music_player::album_songsDataTable^  cln = (cli::safe_cast<music_player::album_songsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::album_songsDataTable::CreateInstance() {
    return (gcnew music_player::album_songsDataTable());
}

inline ::System::Void music_player::album_songsDataTable::InitVars() {
    this->columnalbum_songs_Id = __super::Columns[L"album_songs_Id"];
    this->columnalbum_Id = __super::Columns[L"album_Id"];
}

inline ::System::Void music_player::album_songsDataTable::InitClass() {
    this->columnalbum_songs_Id = (gcnew ::System::Data::DataColumn(L"album_songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbum_songs_Id);
    this->columnalbum_Id = (gcnew ::System::Data::DataColumn(L"album_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbum_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnalbum_songs_Id}, 
            true)));
    this->columnalbum_songs_Id->AutoIncrement = true;
    this->columnalbum_songs_Id->AllowDBNull = false;
    this->columnalbum_songs_Id->Unique = true;
}

inline music_player::album_songsRow^  music_player::album_songsDataTable::Newalbum_songsRow() {
    return (cli::safe_cast<music_player::album_songsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::album_songsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::album_songsRow(builder));
}

inline ::System::Type^  music_player::album_songsDataTable::GetRowType() {
    return music_player::album_songsRow::typeid;
}

inline ::System::Void music_player::album_songsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->album_songsRowChanged(this, (gcnew music_player::album_songsRowChangeEvent((cli::safe_cast<music_player::album_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->album_songsRowChanging(this, (gcnew music_player::album_songsRowChangeEvent((cli::safe_cast<music_player::album_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->album_songsRowDeleted(this, (gcnew music_player::album_songsRowChangeEvent((cli::safe_cast<music_player::album_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->album_songsRowDeleting(this, (gcnew music_player::album_songsRowChangeEvent((cli::safe_cast<music_player::album_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songsDataTable::Removealbum_songsRow(music_player::album_songsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::album_songsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"album_songsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::album_songDataTable::album_songDataTable() {
    this->TableName = L"album_song";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::album_songDataTable::album_songDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::album_songDataTable::album_songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::album_songDataTable::album_song_ColumnColumn::get() {
    return this->columnalbum_song_Column;
}

inline ::System::Data::DataColumn^  music_player::album_songDataTable::album_songs_IdColumn::get() {
    return this->columnalbum_songs_Id;
}

inline ::System::Int32 music_player::album_songDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::album_songRow^  music_player::album_songDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::album_songRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::album_songDataTable::Addalbum_songRow(music_player::album_songRow^  row) {
    this->Rows->Add(row);
}

inline music_player::album_songRow^  music_player::album_songDataTable::Addalbum_songRow(System::String^  album_song_Column, 
            music_player::album_songsRow^  parentalbum_songsRowByalbum_songs_album_song) {
    music_player::album_songRow^  rowalbum_songRow = (cli::safe_cast<music_player::album_songRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {album_song_Column, nullptr};
    if (parentalbum_songsRowByalbum_songs_album_song != nullptr) {
        columnValuesArray[1] = parentalbum_songsRowByalbum_songs_album_song[0];
    }
    rowalbum_songRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowalbum_songRow);
    return rowalbum_songRow;
}

inline ::System::Collections::IEnumerator^  music_player::album_songDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::album_songDataTable::Clone() {
    music_player::album_songDataTable^  cln = (cli::safe_cast<music_player::album_songDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::album_songDataTable::CreateInstance() {
    return (gcnew music_player::album_songDataTable());
}

inline ::System::Void music_player::album_songDataTable::InitVars() {
    this->columnalbum_song_Column = __super::Columns[L"album_song_Column"];
    this->columnalbum_songs_Id = __super::Columns[L"album_songs_Id"];
}

inline ::System::Void music_player::album_songDataTable::InitClass() {
    this->columnalbum_song_Column = (gcnew ::System::Data::DataColumn(L"album_song_Column", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnalbum_song_Column);
    this->columnalbum_songs_Id = (gcnew ::System::Data::DataColumn(L"album_songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnalbum_songs_Id);
}

inline music_player::album_songRow^  music_player::album_songDataTable::Newalbum_songRow() {
    return (cli::safe_cast<music_player::album_songRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::album_songDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::album_songRow(builder));
}

inline ::System::Type^  music_player::album_songDataTable::GetRowType() {
    return music_player::album_songRow::typeid;
}

inline ::System::Void music_player::album_songDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->album_songRowChanged(this, (gcnew music_player::album_songRowChangeEvent((cli::safe_cast<music_player::album_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->album_songRowChanging(this, (gcnew music_player::album_songRowChangeEvent((cli::safe_cast<music_player::album_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->album_songRowDeleted(this, (gcnew music_player::album_songRowChangeEvent((cli::safe_cast<music_player::album_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->album_songRowDeleting(this, (gcnew music_player::album_songRowChangeEvent((cli::safe_cast<music_player::album_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::album_songDataTable::Removealbum_songRow(music_player::album_songRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::album_songDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"album_songDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::playlistsDataTable::playlistsDataTable() {
    this->TableName = L"playlists";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::playlistsDataTable::playlistsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::playlistsDataTable::playlistsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::playlistsDataTable::playlists_IdColumn::get() {
    return this->columnplaylists_Id;
}

inline ::System::Int32 music_player::playlistsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::playlistsRow^  music_player::playlistsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::playlistsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::playlistsDataTable::AddplaylistsRow(music_player::playlistsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::playlistsRow^  music_player::playlistsDataTable::AddplaylistsRow() {
    music_player::playlistsRow^  rowplaylistsRow = (cli::safe_cast<music_player::playlistsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowplaylistsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowplaylistsRow);
    return rowplaylistsRow;
}

inline ::System::Collections::IEnumerator^  music_player::playlistsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::playlistsDataTable::Clone() {
    music_player::playlistsDataTable^  cln = (cli::safe_cast<music_player::playlistsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::playlistsDataTable::CreateInstance() {
    return (gcnew music_player::playlistsDataTable());
}

inline ::System::Void music_player::playlistsDataTable::InitVars() {
    this->columnplaylists_Id = __super::Columns[L"playlists_Id"];
}

inline ::System::Void music_player::playlistsDataTable::InitClass() {
    this->columnplaylists_Id = (gcnew ::System::Data::DataColumn(L"playlists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnplaylists_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnplaylists_Id}, 
            true)));
    this->columnplaylists_Id->AutoIncrement = true;
    this->columnplaylists_Id->AllowDBNull = false;
    this->columnplaylists_Id->Unique = true;
}

inline music_player::playlistsRow^  music_player::playlistsDataTable::NewplaylistsRow() {
    return (cli::safe_cast<music_player::playlistsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::playlistsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::playlistsRow(builder));
}

inline ::System::Type^  music_player::playlistsDataTable::GetRowType() {
    return music_player::playlistsRow::typeid;
}

inline ::System::Void music_player::playlistsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->playlistsRowChanged(this, (gcnew music_player::playlistsRowChangeEvent((cli::safe_cast<music_player::playlistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->playlistsRowChanging(this, (gcnew music_player::playlistsRowChangeEvent((cli::safe_cast<music_player::playlistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->playlistsRowDeleted(this, (gcnew music_player::playlistsRowChangeEvent((cli::safe_cast<music_player::playlistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->playlistsRowDeleting(this, (gcnew music_player::playlistsRowChangeEvent((cli::safe_cast<music_player::playlistsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistsDataTable::RemoveplaylistsRow(music_player::playlistsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::playlistsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"playlistsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::playlistDataTable::playlistDataTable() {
    this->TableName = L"playlist";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::playlistDataTable::playlistDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::playlistDataTable::playlistDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::playlistDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  music_player::playlistDataTable::playlist_nameColumn::get() {
    return this->columnplaylist_name;
}

inline ::System::Data::DataColumn^  music_player::playlistDataTable::playlist_IdColumn::get() {
    return this->columnplaylist_Id;
}

inline ::System::Data::DataColumn^  music_player::playlistDataTable::playlists_IdColumn::get() {
    return this->columnplaylists_Id;
}

inline ::System::Int32 music_player::playlistDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::playlistRow^  music_player::playlistDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::playlistRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::playlistDataTable::AddplaylistRow(music_player::playlistRow^  row) {
    this->Rows->Add(row);
}

inline music_player::playlistRow^  music_player::playlistDataTable::AddplaylistRow(System::String^  ID, System::String^  playlist_name, 
            music_player::playlistsRow^  parentplaylistsRowByplaylists_playlist) {
    music_player::playlistRow^  rowplaylistRow = (cli::safe_cast<music_player::playlistRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {ID, playlist_name, nullptr, 
        nullptr};
    if (parentplaylistsRowByplaylists_playlist != nullptr) {
        columnValuesArray[3] = parentplaylistsRowByplaylists_playlist[0];
    }
    rowplaylistRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowplaylistRow);
    return rowplaylistRow;
}

inline ::System::Collections::IEnumerator^  music_player::playlistDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::playlistDataTable::Clone() {
    music_player::playlistDataTable^  cln = (cli::safe_cast<music_player::playlistDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::playlistDataTable::CreateInstance() {
    return (gcnew music_player::playlistDataTable());
}

inline ::System::Void music_player::playlistDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnplaylist_name = __super::Columns[L"playlist_name"];
    this->columnplaylist_Id = __super::Columns[L"playlist_Id"];
    this->columnplaylists_Id = __super::Columns[L"playlists_Id"];
}

inline ::System::Void music_player::playlistDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnplaylist_name = (gcnew ::System::Data::DataColumn(L"playlist_name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnplaylist_name);
    this->columnplaylist_Id = (gcnew ::System::Data::DataColumn(L"playlist_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnplaylist_Id);
    this->columnplaylists_Id = (gcnew ::System::Data::DataColumn(L"playlists_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnplaylists_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnplaylist_Id}, 
            true)));
    this->columnID->AllowDBNull = false;
    this->columnID->Namespace = L"";
    this->columnplaylist_name->AllowDBNull = false;
    this->columnplaylist_Id->AutoIncrement = true;
    this->columnplaylist_Id->AllowDBNull = false;
    this->columnplaylist_Id->Unique = true;
}

inline music_player::playlistRow^  music_player::playlistDataTable::NewplaylistRow() {
    return (cli::safe_cast<music_player::playlistRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::playlistDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::playlistRow(builder));
}

inline ::System::Type^  music_player::playlistDataTable::GetRowType() {
    return music_player::playlistRow::typeid;
}

inline ::System::Void music_player::playlistDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->playlistRowChanged(this, (gcnew music_player::playlistRowChangeEvent((cli::safe_cast<music_player::playlistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->playlistRowChanging(this, (gcnew music_player::playlistRowChangeEvent((cli::safe_cast<music_player::playlistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->playlistRowDeleted(this, (gcnew music_player::playlistRowChangeEvent((cli::safe_cast<music_player::playlistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->playlistRowDeleting(this, (gcnew music_player::playlistRowChangeEvent((cli::safe_cast<music_player::playlistRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlistDataTable::RemoveplaylistRow(music_player::playlistRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::playlistDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"playlistDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::playlist_songsDataTable::playlist_songsDataTable() {
    this->TableName = L"playlist_songs";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::playlist_songsDataTable::playlist_songsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::playlist_songsDataTable::playlist_songsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::playlist_songsDataTable::playlist_songs_IdColumn::get() {
    return this->columnplaylist_songs_Id;
}

inline ::System::Data::DataColumn^  music_player::playlist_songsDataTable::playlist_IdColumn::get() {
    return this->columnplaylist_Id;
}

inline ::System::Int32 music_player::playlist_songsDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::playlist_songsRow^  music_player::playlist_songsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::playlist_songsRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::playlist_songsDataTable::Addplaylist_songsRow(music_player::playlist_songsRow^  row) {
    this->Rows->Add(row);
}

inline music_player::playlist_songsRow^  music_player::playlist_songsDataTable::Addplaylist_songsRow(music_player::playlistRow^  parentplaylistRowByplaylist_playlist_songs) {
    music_player::playlist_songsRow^  rowplaylist_songsRow = (cli::safe_cast<music_player::playlist_songsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentplaylistRowByplaylist_playlist_songs != nullptr) {
        columnValuesArray[1] = parentplaylistRowByplaylist_playlist_songs[2];
    }
    rowplaylist_songsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowplaylist_songsRow);
    return rowplaylist_songsRow;
}

inline ::System::Collections::IEnumerator^  music_player::playlist_songsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::playlist_songsDataTable::Clone() {
    music_player::playlist_songsDataTable^  cln = (cli::safe_cast<music_player::playlist_songsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::playlist_songsDataTable::CreateInstance() {
    return (gcnew music_player::playlist_songsDataTable());
}

inline ::System::Void music_player::playlist_songsDataTable::InitVars() {
    this->columnplaylist_songs_Id = __super::Columns[L"playlist_songs_Id"];
    this->columnplaylist_Id = __super::Columns[L"playlist_Id"];
}

inline ::System::Void music_player::playlist_songsDataTable::InitClass() {
    this->columnplaylist_songs_Id = (gcnew ::System::Data::DataColumn(L"playlist_songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnplaylist_songs_Id);
    this->columnplaylist_Id = (gcnew ::System::Data::DataColumn(L"playlist_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnplaylist_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnplaylist_songs_Id}, 
            true)));
    this->columnplaylist_songs_Id->AutoIncrement = true;
    this->columnplaylist_songs_Id->AllowDBNull = false;
    this->columnplaylist_songs_Id->Unique = true;
}

inline music_player::playlist_songsRow^  music_player::playlist_songsDataTable::Newplaylist_songsRow() {
    return (cli::safe_cast<music_player::playlist_songsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::playlist_songsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::playlist_songsRow(builder));
}

inline ::System::Type^  music_player::playlist_songsDataTable::GetRowType() {
    return music_player::playlist_songsRow::typeid;
}

inline ::System::Void music_player::playlist_songsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->playlist_songsRowChanged(this, (gcnew music_player::playlist_songsRowChangeEvent((cli::safe_cast<music_player::playlist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->playlist_songsRowChanging(this, (gcnew music_player::playlist_songsRowChangeEvent((cli::safe_cast<music_player::playlist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->playlist_songsRowDeleted(this, (gcnew music_player::playlist_songsRowChangeEvent((cli::safe_cast<music_player::playlist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->playlist_songsRowDeleting(this, (gcnew music_player::playlist_songsRowChangeEvent((cli::safe_cast<music_player::playlist_songsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songsDataTable::Removeplaylist_songsRow(music_player::playlist_songsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::playlist_songsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"playlist_songsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::playlist_songDataTable::playlist_songDataTable() {
    this->TableName = L"playlist_song";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline music_player::playlist_songDataTable::playlist_songDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline music_player::playlist_songDataTable::playlist_songDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  music_player::playlist_songDataTable::playlist_song_ColumnColumn::get() {
    return this->columnplaylist_song_Column;
}

inline ::System::Data::DataColumn^  music_player::playlist_songDataTable::playlist_songs_IdColumn::get() {
    return this->columnplaylist_songs_Id;
}

inline ::System::Int32 music_player::playlist_songDataTable::Count::get() {
    return this->Rows->Count;
}

inline music_player::playlist_songRow^  music_player::playlist_songDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<music_player::playlist_songRow^  >(this->Rows[index]));
}

inline ::System::Void music_player::playlist_songDataTable::Addplaylist_songRow(music_player::playlist_songRow^  row) {
    this->Rows->Add(row);
}

inline music_player::playlist_songRow^  music_player::playlist_songDataTable::Addplaylist_songRow(System::String^  playlist_song_Column, 
            music_player::playlist_songsRow^  parentplaylist_songsRowByplaylist_songs_playlist_song) {
    music_player::playlist_songRow^  rowplaylist_songRow = (cli::safe_cast<music_player::playlist_songRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {playlist_song_Column, nullptr};
    if (parentplaylist_songsRowByplaylist_songs_playlist_song != nullptr) {
        columnValuesArray[1] = parentplaylist_songsRowByplaylist_songs_playlist_song[0];
    }
    rowplaylist_songRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowplaylist_songRow);
    return rowplaylist_songRow;
}

inline ::System::Collections::IEnumerator^  music_player::playlist_songDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  music_player::playlist_songDataTable::Clone() {
    music_player::playlist_songDataTable^  cln = (cli::safe_cast<music_player::playlist_songDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  music_player::playlist_songDataTable::CreateInstance() {
    return (gcnew music_player::playlist_songDataTable());
}

inline ::System::Void music_player::playlist_songDataTable::InitVars() {
    this->columnplaylist_song_Column = __super::Columns[L"playlist_song_Column"];
    this->columnplaylist_songs_Id = __super::Columns[L"playlist_songs_Id"];
}

inline ::System::Void music_player::playlist_songDataTable::InitClass() {
    this->columnplaylist_song_Column = (gcnew ::System::Data::DataColumn(L"playlist_song_Column", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnplaylist_song_Column);
    this->columnplaylist_songs_Id = (gcnew ::System::Data::DataColumn(L"playlist_songs_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnplaylist_songs_Id);
}

inline music_player::playlist_songRow^  music_player::playlist_songDataTable::Newplaylist_songRow() {
    return (cli::safe_cast<music_player::playlist_songRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  music_player::playlist_songDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew music_player::playlist_songRow(builder));
}

inline ::System::Type^  music_player::playlist_songDataTable::GetRowType() {
    return music_player::playlist_songRow::typeid;
}

inline ::System::Void music_player::playlist_songDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->playlist_songRowChanged(this, (gcnew music_player::playlist_songRowChangeEvent((cli::safe_cast<music_player::playlist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->playlist_songRowChanging(this, (gcnew music_player::playlist_songRowChangeEvent((cli::safe_cast<music_player::playlist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->playlist_songRowDeleted(this, (gcnew music_player::playlist_songRowChangeEvent((cli::safe_cast<music_player::playlist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->playlist_songRowDeleting(this, (gcnew music_player::playlist_songRowChangeEvent((cli::safe_cast<music_player::playlist_songRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void music_player::playlist_songDataTable::Removeplaylist_songRow(music_player::playlist_songRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  music_player::playlist_songDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    music_player^  ds = (gcnew music_player());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"playlist_songDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline music_player::songsRow::songsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesongs = (cli::safe_cast<music_player::songsDataTable^  >(this->Table));
}

inline System::Int32 music_player::songsRow::songs_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablesongs->songs_IdColumn]));
}
inline System::Void music_player::songsRow::songs_Id::set(System::Int32 value) {
    this[this->tablesongs->songs_IdColumn] = value;
}

inline cli::array< music_player::songRow^  >^  music_player::songsRow::GetsongRows() {
    if (this->Table->ChildRelations[L"songs_song"] == nullptr) {
        return gcnew cli::array< music_player::songRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::songRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"songs_song"])));
    }
}


inline music_player::songRow::songRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesong = (cli::safe_cast<music_player::songDataTable^  >(this->Table));
}

inline System::String^  music_player::songRow::ID::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesong->IDColumn]));
}
inline System::Void music_player::songRow::ID::set(System::String^  value) {
    this[this->tablesong->IDColumn] = value;
}

inline System::String^  music_player::songRow::song_name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesong->song_nameColumn]));
}
inline System::Void music_player::songRow::song_name::set(System::String^  value) {
    this[this->tablesong->song_nameColumn] = value;
}

inline System::String^  music_player::songRow::duration::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesong->durationColumn]));
}
inline System::Void music_player::songRow::duration::set(System::String^  value) {
    this[this->tablesong->durationColumn] = value;
}

inline System::String^  music_player::songRow::song_album::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesong->song_albumColumn]));
}
inline System::Void music_player::songRow::song_album::set(System::String^  value) {
    this[this->tablesong->song_albumColumn] = value;
}

inline System::Int32 music_player::songRow::song_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablesong->song_IdColumn]));
}
inline System::Void music_player::songRow::song_Id::set(System::Int32 value) {
    this[this->tablesong->song_IdColumn] = value;
}

inline System::Int32 music_player::songRow::songs_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesong->songs_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'songs_Id\' in table \'song\' is DBNull.", e));
    }
}
inline System::Void music_player::songRow::songs_Id::set(System::Int32 value) {
    this[this->tablesong->songs_IdColumn] = value;
}

inline music_player::songsRow^  music_player::songRow::songsRow::get() {
    return (cli::safe_cast<music_player::songsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"songs_song"])));
}
inline System::Void music_player::songRow::songsRow::set(music_player::songsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"songs_song"]);
}

inline ::System::Boolean music_player::songRow::Issongs_IdNull() {
    return this->IsNull(this->tablesong->songs_IdColumn);
}

inline ::System::Void music_player::songRow::Setsongs_IdNull() {
    this[this->tablesong->songs_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::song_artistsRow^  >^  music_player::songRow::Getsong_artistsRows() {
    if (this->Table->ChildRelations[L"song_song_artists"] == nullptr) {
        return gcnew cli::array< music_player::song_artistsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::song_artistsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"song_song_artists"])));
    }
}


inline music_player::song_artistsRow::song_artistsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesong_artists = (cli::safe_cast<music_player::song_artistsDataTable^  >(this->Table));
}

inline System::Int32 music_player::song_artistsRow::song_artists_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablesong_artists->song_artists_IdColumn]));
}
inline System::Void music_player::song_artistsRow::song_artists_Id::set(System::Int32 value) {
    this[this->tablesong_artists->song_artists_IdColumn] = value;
}

inline System::Int32 music_player::song_artistsRow::song_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesong_artists->song_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'song_Id\' in table \'song_artists\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::song_artistsRow::song_Id::set(System::Int32 value) {
    this[this->tablesong_artists->song_IdColumn] = value;
}

inline music_player::songRow^  music_player::song_artistsRow::songRow::get() {
    return (cli::safe_cast<music_player::songRow^  >(this->GetParentRow(this->Table->ParentRelations[L"song_song_artists"])));
}
inline System::Void music_player::song_artistsRow::songRow::set(music_player::songRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"song_song_artists"]);
}

inline ::System::Boolean music_player::song_artistsRow::Issong_IdNull() {
    return this->IsNull(this->tablesong_artists->song_IdColumn);
}

inline ::System::Void music_player::song_artistsRow::Setsong_IdNull() {
    this[this->tablesong_artists->song_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::song_artistRow^  >^  music_player::song_artistsRow::Getsong_artistRows() {
    if (this->Table->ChildRelations[L"song_artists_song_artist"] == nullptr) {
        return gcnew cli::array< music_player::song_artistRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::song_artistRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"song_artists_song_artist"])));
    }
}


inline music_player::song_artistRow::song_artistRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesong_artist = (cli::safe_cast<music_player::song_artistDataTable^  >(this->Table));
}

inline System::String^  music_player::song_artistRow::song_artist_Column::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablesong_artist->song_artist_ColumnColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'song_artist_Column\' in table \'song_artist\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::song_artistRow::song_artist_Column::set(System::String^  value) {
    this[this->tablesong_artist->song_artist_ColumnColumn] = value;
}

inline System::Int32 music_player::song_artistRow::song_artists_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesong_artist->song_artists_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'song_artists_Id\' in table \'song_artist\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::song_artistRow::song_artists_Id::set(System::Int32 value) {
    this[this->tablesong_artist->song_artists_IdColumn] = value;
}

inline music_player::song_artistsRow^  music_player::song_artistRow::song_artistsRow::get() {
    return (cli::safe_cast<music_player::song_artistsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"song_artists_song_artist"])));
}
inline System::Void music_player::song_artistRow::song_artistsRow::set(music_player::song_artistsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"song_artists_song_artist"]);
}

inline ::System::Boolean music_player::song_artistRow::Issong_artist_ColumnNull() {
    return this->IsNull(this->tablesong_artist->song_artist_ColumnColumn);
}

inline ::System::Void music_player::song_artistRow::Setsong_artist_ColumnNull() {
    this[this->tablesong_artist->song_artist_ColumnColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean music_player::song_artistRow::Issong_artists_IdNull() {
    return this->IsNull(this->tablesong_artist->song_artists_IdColumn);
}

inline ::System::Void music_player::song_artistRow::Setsong_artists_IdNull() {
    this[this->tablesong_artist->song_artists_IdColumn] = ::System::Convert::DBNull;
}


inline music_player::artistsRow::artistsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableartists = (cli::safe_cast<music_player::artistsDataTable^  >(this->Table));
}

inline System::Int32 music_player::artistsRow::artists_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableartists->artists_IdColumn]));
}
inline System::Void music_player::artistsRow::artists_Id::set(System::Int32 value) {
    this[this->tableartists->artists_IdColumn] = value;
}

inline cli::array< music_player::artistRow^  >^  music_player::artistsRow::GetartistRows() {
    if (this->Table->ChildRelations[L"artists_artist"] == nullptr) {
        return gcnew cli::array< music_player::artistRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::artistRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"artists_artist"])));
    }
}


inline music_player::artistRow::artistRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableartist = (cli::safe_cast<music_player::artistDataTable^  >(this->Table));
}

inline System::String^  music_player::artistRow::ID::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableartist->IDColumn]));
}
inline System::Void music_player::artistRow::ID::set(System::String^  value) {
    this[this->tableartist->IDColumn] = value;
}

inline System::String^  music_player::artistRow::artist_name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableartist->artist_nameColumn]));
}
inline System::Void music_player::artistRow::artist_name::set(System::String^  value) {
    this[this->tableartist->artist_nameColumn] = value;
}

inline System::Int32 music_player::artistRow::artist_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableartist->artist_IdColumn]));
}
inline System::Void music_player::artistRow::artist_Id::set(System::Int32 value) {
    this[this->tableartist->artist_IdColumn] = value;
}

inline System::Int32 music_player::artistRow::artists_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableartist->artists_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'artists_Id\' in table \'artist\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::artistRow::artists_Id::set(System::Int32 value) {
    this[this->tableartist->artists_IdColumn] = value;
}

inline music_player::artistsRow^  music_player::artistRow::artistsRow::get() {
    return (cli::safe_cast<music_player::artistsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"artists_artist"])));
}
inline System::Void music_player::artistRow::artistsRow::set(music_player::artistsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"artists_artist"]);
}

inline ::System::Boolean music_player::artistRow::Isartists_IdNull() {
    return this->IsNull(this->tableartist->artists_IdColumn);
}

inline ::System::Void music_player::artistRow::Setartists_IdNull() {
    this[this->tableartist->artists_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::artist_albumsRow^  >^  music_player::artistRow::Getartist_albumsRows() {
    if (this->Table->ChildRelations[L"artist_artist_albums"] == nullptr) {
        return gcnew cli::array< music_player::artist_albumsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::artist_albumsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"artist_artist_albums"])));
    }
}

inline cli::array< music_player::artist_songsRow^  >^  music_player::artistRow::Getartist_songsRows() {
    if (this->Table->ChildRelations[L"artist_artist_songs"] == nullptr) {
        return gcnew cli::array< music_player::artist_songsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::artist_songsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"artist_artist_songs"])));
    }
}


inline music_player::artist_albumsRow::artist_albumsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableartist_albums = (cli::safe_cast<music_player::artist_albumsDataTable^  >(this->Table));
}

inline System::Int32 music_player::artist_albumsRow::artist_albums_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableartist_albums->artist_albums_IdColumn]));
}
inline System::Void music_player::artist_albumsRow::artist_albums_Id::set(System::Int32 value) {
    this[this->tableartist_albums->artist_albums_IdColumn] = value;
}

inline System::Int32 music_player::artist_albumsRow::artist_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableartist_albums->artist_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'artist_Id\' in table \'artist_albums\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::artist_albumsRow::artist_Id::set(System::Int32 value) {
    this[this->tableartist_albums->artist_IdColumn] = value;
}

inline music_player::artistRow^  music_player::artist_albumsRow::artistRow::get() {
    return (cli::safe_cast<music_player::artistRow^  >(this->GetParentRow(this->Table->ParentRelations[L"artist_artist_albums"])));
}
inline System::Void music_player::artist_albumsRow::artistRow::set(music_player::artistRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"artist_artist_albums"]);
}

inline ::System::Boolean music_player::artist_albumsRow::Isartist_IdNull() {
    return this->IsNull(this->tableartist_albums->artist_IdColumn);
}

inline ::System::Void music_player::artist_albumsRow::Setartist_IdNull() {
    this[this->tableartist_albums->artist_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::artist_albumRow^  >^  music_player::artist_albumsRow::Getartist_albumRows() {
    if (this->Table->ChildRelations[L"artist_albums_artist_album"] == nullptr) {
        return gcnew cli::array< music_player::artist_albumRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::artist_albumRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"artist_albums_artist_album"])));
    }
}


inline music_player::artist_albumRow::artist_albumRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableartist_album = (cli::safe_cast<music_player::artist_albumDataTable^  >(this->Table));
}

inline System::String^  music_player::artist_albumRow::artist_album_Column::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableartist_album->artist_album_ColumnColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'artist_album_Column\' in table \'artist_album\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::artist_albumRow::artist_album_Column::set(System::String^  value) {
    this[this->tableartist_album->artist_album_ColumnColumn] = value;
}

inline System::Int32 music_player::artist_albumRow::artist_albums_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableartist_album->artist_albums_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'artist_albums_Id\' in table \'artist_album\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::artist_albumRow::artist_albums_Id::set(System::Int32 value) {
    this[this->tableartist_album->artist_albums_IdColumn] = value;
}

inline music_player::artist_albumsRow^  music_player::artist_albumRow::artist_albumsRow::get() {
    return (cli::safe_cast<music_player::artist_albumsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"artist_albums_artist_album"])));
}
inline System::Void music_player::artist_albumRow::artist_albumsRow::set(music_player::artist_albumsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"artist_albums_artist_album"]);
}

inline ::System::Boolean music_player::artist_albumRow::Isartist_album_ColumnNull() {
    return this->IsNull(this->tableartist_album->artist_album_ColumnColumn);
}

inline ::System::Void music_player::artist_albumRow::Setartist_album_ColumnNull() {
    this[this->tableartist_album->artist_album_ColumnColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean music_player::artist_albumRow::Isartist_albums_IdNull() {
    return this->IsNull(this->tableartist_album->artist_albums_IdColumn);
}

inline ::System::Void music_player::artist_albumRow::Setartist_albums_IdNull() {
    this[this->tableartist_album->artist_albums_IdColumn] = ::System::Convert::DBNull;
}


inline music_player::artist_songsRow::artist_songsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableartist_songs = (cli::safe_cast<music_player::artist_songsDataTable^  >(this->Table));
}

inline System::Int32 music_player::artist_songsRow::artist_songs_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableartist_songs->artist_songs_IdColumn]));
}
inline System::Void music_player::artist_songsRow::artist_songs_Id::set(System::Int32 value) {
    this[this->tableartist_songs->artist_songs_IdColumn] = value;
}

inline System::Int32 music_player::artist_songsRow::artist_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableartist_songs->artist_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'artist_Id\' in table \'artist_songs\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::artist_songsRow::artist_Id::set(System::Int32 value) {
    this[this->tableartist_songs->artist_IdColumn] = value;
}

inline music_player::artistRow^  music_player::artist_songsRow::artistRow::get() {
    return (cli::safe_cast<music_player::artistRow^  >(this->GetParentRow(this->Table->ParentRelations[L"artist_artist_songs"])));
}
inline System::Void music_player::artist_songsRow::artistRow::set(music_player::artistRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"artist_artist_songs"]);
}

inline ::System::Boolean music_player::artist_songsRow::Isartist_IdNull() {
    return this->IsNull(this->tableartist_songs->artist_IdColumn);
}

inline ::System::Void music_player::artist_songsRow::Setartist_IdNull() {
    this[this->tableartist_songs->artist_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::artist_songRow^  >^  music_player::artist_songsRow::Getartist_songRows() {
    if (this->Table->ChildRelations[L"artist_songs_artist_song"] == nullptr) {
        return gcnew cli::array< music_player::artist_songRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::artist_songRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"artist_songs_artist_song"])));
    }
}


inline music_player::artist_songRow::artist_songRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableartist_song = (cli::safe_cast<music_player::artist_songDataTable^  >(this->Table));
}

inline System::String^  music_player::artist_songRow::artist_song_Column::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableartist_song->artist_song_ColumnColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'artist_song_Column\' in table \'artist_song\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::artist_songRow::artist_song_Column::set(System::String^  value) {
    this[this->tableartist_song->artist_song_ColumnColumn] = value;
}

inline System::Int32 music_player::artist_songRow::artist_songs_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableartist_song->artist_songs_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'artist_songs_Id\' in table \'artist_song\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::artist_songRow::artist_songs_Id::set(System::Int32 value) {
    this[this->tableartist_song->artist_songs_IdColumn] = value;
}

inline music_player::artist_songsRow^  music_player::artist_songRow::artist_songsRow::get() {
    return (cli::safe_cast<music_player::artist_songsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"artist_songs_artist_song"])));
}
inline System::Void music_player::artist_songRow::artist_songsRow::set(music_player::artist_songsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"artist_songs_artist_song"]);
}

inline ::System::Boolean music_player::artist_songRow::Isartist_song_ColumnNull() {
    return this->IsNull(this->tableartist_song->artist_song_ColumnColumn);
}

inline ::System::Void music_player::artist_songRow::Setartist_song_ColumnNull() {
    this[this->tableartist_song->artist_song_ColumnColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean music_player::artist_songRow::Isartist_songs_IdNull() {
    return this->IsNull(this->tableartist_song->artist_songs_IdColumn);
}

inline ::System::Void music_player::artist_songRow::Setartist_songs_IdNull() {
    this[this->tableartist_song->artist_songs_IdColumn] = ::System::Convert::DBNull;
}


inline music_player::albumsRow::albumsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablealbums = (cli::safe_cast<music_player::albumsDataTable^  >(this->Table));
}

inline System::Int32 music_player::albumsRow::albums_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablealbums->albums_IdColumn]));
}
inline System::Void music_player::albumsRow::albums_Id::set(System::Int32 value) {
    this[this->tablealbums->albums_IdColumn] = value;
}

inline cli::array< music_player::albumRow^  >^  music_player::albumsRow::GetalbumRows() {
    if (this->Table->ChildRelations[L"albums_album"] == nullptr) {
        return gcnew cli::array< music_player::albumRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::albumRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"albums_album"])));
    }
}


inline music_player::albumRow::albumRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablealbum = (cli::safe_cast<music_player::albumDataTable^  >(this->Table));
}

inline System::String^  music_player::albumRow::ID::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablealbum->IDColumn]));
}
inline System::Void music_player::albumRow::ID::set(System::String^  value) {
    this[this->tablealbum->IDColumn] = value;
}

inline System::String^  music_player::albumRow::album_name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablealbum->album_nameColumn]));
}
inline System::Void music_player::albumRow::album_name::set(System::String^  value) {
    this[this->tablealbum->album_nameColumn] = value;
}

inline System::Int32 music_player::albumRow::album_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablealbum->album_IdColumn]));
}
inline System::Void music_player::albumRow::album_Id::set(System::Int32 value) {
    this[this->tablealbum->album_IdColumn] = value;
}

inline System::Int32 music_player::albumRow::albums_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablealbum->albums_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'albums_Id\' in table \'album\' is DBNull.", e));
    }
}
inline System::Void music_player::albumRow::albums_Id::set(System::Int32 value) {
    this[this->tablealbum->albums_IdColumn] = value;
}

inline music_player::albumsRow^  music_player::albumRow::albumsRow::get() {
    return (cli::safe_cast<music_player::albumsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"albums_album"])));
}
inline System::Void music_player::albumRow::albumsRow::set(music_player::albumsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"albums_album"]);
}

inline ::System::Boolean music_player::albumRow::Isalbums_IdNull() {
    return this->IsNull(this->tablealbum->albums_IdColumn);
}

inline ::System::Void music_player::albumRow::Setalbums_IdNull() {
    this[this->tablealbum->albums_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::album_artistsRow^  >^  music_player::albumRow::Getalbum_artistsRows() {
    if (this->Table->ChildRelations[L"album_album_artists"] == nullptr) {
        return gcnew cli::array< music_player::album_artistsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::album_artistsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"album_album_artists"])));
    }
}

inline cli::array< music_player::album_songsRow^  >^  music_player::albumRow::Getalbum_songsRows() {
    if (this->Table->ChildRelations[L"album_album_songs"] == nullptr) {
        return gcnew cli::array< music_player::album_songsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::album_songsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"album_album_songs"])));
    }
}


inline music_player::album_artistsRow::album_artistsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablealbum_artists = (cli::safe_cast<music_player::album_artistsDataTable^  >(this->Table));
}

inline System::Int32 music_player::album_artistsRow::album_artists_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablealbum_artists->album_artists_IdColumn]));
}
inline System::Void music_player::album_artistsRow::album_artists_Id::set(System::Int32 value) {
    this[this->tablealbum_artists->album_artists_IdColumn] = value;
}

inline System::Int32 music_player::album_artistsRow::album_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablealbum_artists->album_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'album_Id\' in table \'album_artists\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::album_artistsRow::album_Id::set(System::Int32 value) {
    this[this->tablealbum_artists->album_IdColumn] = value;
}

inline music_player::albumRow^  music_player::album_artistsRow::albumRow::get() {
    return (cli::safe_cast<music_player::albumRow^  >(this->GetParentRow(this->Table->ParentRelations[L"album_album_artists"])));
}
inline System::Void music_player::album_artistsRow::albumRow::set(music_player::albumRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"album_album_artists"]);
}

inline ::System::Boolean music_player::album_artistsRow::Isalbum_IdNull() {
    return this->IsNull(this->tablealbum_artists->album_IdColumn);
}

inline ::System::Void music_player::album_artistsRow::Setalbum_IdNull() {
    this[this->tablealbum_artists->album_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::album_artistRow^  >^  music_player::album_artistsRow::Getalbum_artistRows() {
    if (this->Table->ChildRelations[L"album_artists_album_artist"] == nullptr) {
        return gcnew cli::array< music_player::album_artistRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::album_artistRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"album_artists_album_artist"])));
    }
}


inline music_player::album_artistRow::album_artistRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablealbum_artist = (cli::safe_cast<music_player::album_artistDataTable^  >(this->Table));
}

inline System::String^  music_player::album_artistRow::album_artist_Column::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablealbum_artist->album_artist_ColumnColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'album_artist_Column\' in table \'album_artist\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::album_artistRow::album_artist_Column::set(System::String^  value) {
    this[this->tablealbum_artist->album_artist_ColumnColumn] = value;
}

inline System::Int32 music_player::album_artistRow::album_artists_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablealbum_artist->album_artists_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'album_artists_Id\' in table \'album_artist\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::album_artistRow::album_artists_Id::set(System::Int32 value) {
    this[this->tablealbum_artist->album_artists_IdColumn] = value;
}

inline music_player::album_artistsRow^  music_player::album_artistRow::album_artistsRow::get() {
    return (cli::safe_cast<music_player::album_artistsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"album_artists_album_artist"])));
}
inline System::Void music_player::album_artistRow::album_artistsRow::set(music_player::album_artistsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"album_artists_album_artist"]);
}

inline ::System::Boolean music_player::album_artistRow::Isalbum_artist_ColumnNull() {
    return this->IsNull(this->tablealbum_artist->album_artist_ColumnColumn);
}

inline ::System::Void music_player::album_artistRow::Setalbum_artist_ColumnNull() {
    this[this->tablealbum_artist->album_artist_ColumnColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean music_player::album_artistRow::Isalbum_artists_IdNull() {
    return this->IsNull(this->tablealbum_artist->album_artists_IdColumn);
}

inline ::System::Void music_player::album_artistRow::Setalbum_artists_IdNull() {
    this[this->tablealbum_artist->album_artists_IdColumn] = ::System::Convert::DBNull;
}


inline music_player::album_songsRow::album_songsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablealbum_songs = (cli::safe_cast<music_player::album_songsDataTable^  >(this->Table));
}

inline System::Int32 music_player::album_songsRow::album_songs_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablealbum_songs->album_songs_IdColumn]));
}
inline System::Void music_player::album_songsRow::album_songs_Id::set(System::Int32 value) {
    this[this->tablealbum_songs->album_songs_IdColumn] = value;
}

inline System::Int32 music_player::album_songsRow::album_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablealbum_songs->album_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'album_Id\' in table \'album_songs\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::album_songsRow::album_Id::set(System::Int32 value) {
    this[this->tablealbum_songs->album_IdColumn] = value;
}

inline music_player::albumRow^  music_player::album_songsRow::albumRow::get() {
    return (cli::safe_cast<music_player::albumRow^  >(this->GetParentRow(this->Table->ParentRelations[L"album_album_songs"])));
}
inline System::Void music_player::album_songsRow::albumRow::set(music_player::albumRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"album_album_songs"]);
}

inline ::System::Boolean music_player::album_songsRow::Isalbum_IdNull() {
    return this->IsNull(this->tablealbum_songs->album_IdColumn);
}

inline ::System::Void music_player::album_songsRow::Setalbum_IdNull() {
    this[this->tablealbum_songs->album_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::album_songRow^  >^  music_player::album_songsRow::Getalbum_songRows() {
    if (this->Table->ChildRelations[L"album_songs_album_song"] == nullptr) {
        return gcnew cli::array< music_player::album_songRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::album_songRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"album_songs_album_song"])));
    }
}


inline music_player::album_songRow::album_songRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablealbum_song = (cli::safe_cast<music_player::album_songDataTable^  >(this->Table));
}

inline System::String^  music_player::album_songRow::album_song_Column::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablealbum_song->album_song_ColumnColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'album_song_Column\' in table \'album_song\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::album_songRow::album_song_Column::set(System::String^  value) {
    this[this->tablealbum_song->album_song_ColumnColumn] = value;
}

inline System::Int32 music_player::album_songRow::album_songs_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablealbum_song->album_songs_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'album_songs_Id\' in table \'album_song\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::album_songRow::album_songs_Id::set(System::Int32 value) {
    this[this->tablealbum_song->album_songs_IdColumn] = value;
}

inline music_player::album_songsRow^  music_player::album_songRow::album_songsRow::get() {
    return (cli::safe_cast<music_player::album_songsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"album_songs_album_song"])));
}
inline System::Void music_player::album_songRow::album_songsRow::set(music_player::album_songsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"album_songs_album_song"]);
}

inline ::System::Boolean music_player::album_songRow::Isalbum_song_ColumnNull() {
    return this->IsNull(this->tablealbum_song->album_song_ColumnColumn);
}

inline ::System::Void music_player::album_songRow::Setalbum_song_ColumnNull() {
    this[this->tablealbum_song->album_song_ColumnColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean music_player::album_songRow::Isalbum_songs_IdNull() {
    return this->IsNull(this->tablealbum_song->album_songs_IdColumn);
}

inline ::System::Void music_player::album_songRow::Setalbum_songs_IdNull() {
    this[this->tablealbum_song->album_songs_IdColumn] = ::System::Convert::DBNull;
}


inline music_player::playlistsRow::playlistsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableplaylists = (cli::safe_cast<music_player::playlistsDataTable^  >(this->Table));
}

inline System::Int32 music_player::playlistsRow::playlists_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableplaylists->playlists_IdColumn]));
}
inline System::Void music_player::playlistsRow::playlists_Id::set(System::Int32 value) {
    this[this->tableplaylists->playlists_IdColumn] = value;
}

inline cli::array< music_player::playlistRow^  >^  music_player::playlistsRow::GetplaylistRows() {
    if (this->Table->ChildRelations[L"playlists_playlist"] == nullptr) {
        return gcnew cli::array< music_player::playlistRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::playlistRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"playlists_playlist"])));
    }
}


inline music_player::playlistRow::playlistRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableplaylist = (cli::safe_cast<music_player::playlistDataTable^  >(this->Table));
}

inline System::String^  music_player::playlistRow::ID::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableplaylist->IDColumn]));
}
inline System::Void music_player::playlistRow::ID::set(System::String^  value) {
    this[this->tableplaylist->IDColumn] = value;
}

inline System::String^  music_player::playlistRow::playlist_name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableplaylist->playlist_nameColumn]));
}
inline System::Void music_player::playlistRow::playlist_name::set(System::String^  value) {
    this[this->tableplaylist->playlist_nameColumn] = value;
}

inline System::Int32 music_player::playlistRow::playlist_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableplaylist->playlist_IdColumn]));
}
inline System::Void music_player::playlistRow::playlist_Id::set(System::Int32 value) {
    this[this->tableplaylist->playlist_IdColumn] = value;
}

inline System::Int32 music_player::playlistRow::playlists_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableplaylist->playlists_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'playlists_Id\' in table \'playlist\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::playlistRow::playlists_Id::set(System::Int32 value) {
    this[this->tableplaylist->playlists_IdColumn] = value;
}

inline music_player::playlistsRow^  music_player::playlistRow::playlistsRow::get() {
    return (cli::safe_cast<music_player::playlistsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"playlists_playlist"])));
}
inline System::Void music_player::playlistRow::playlistsRow::set(music_player::playlistsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"playlists_playlist"]);
}

inline ::System::Boolean music_player::playlistRow::Isplaylists_IdNull() {
    return this->IsNull(this->tableplaylist->playlists_IdColumn);
}

inline ::System::Void music_player::playlistRow::Setplaylists_IdNull() {
    this[this->tableplaylist->playlists_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::playlist_songsRow^  >^  music_player::playlistRow::Getplaylist_songsRows() {
    if (this->Table->ChildRelations[L"playlist_playlist_songs"] == nullptr) {
        return gcnew cli::array< music_player::playlist_songsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::playlist_songsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"playlist_playlist_songs"])));
    }
}


inline music_player::playlist_songsRow::playlist_songsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableplaylist_songs = (cli::safe_cast<music_player::playlist_songsDataTable^  >(this->Table));
}

inline System::Int32 music_player::playlist_songsRow::playlist_songs_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableplaylist_songs->playlist_songs_IdColumn]));
}
inline System::Void music_player::playlist_songsRow::playlist_songs_Id::set(System::Int32 value) {
    this[this->tableplaylist_songs->playlist_songs_IdColumn] = value;
}

inline System::Int32 music_player::playlist_songsRow::playlist_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableplaylist_songs->playlist_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'playlist_Id\' in table \'playlist_songs\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::playlist_songsRow::playlist_Id::set(System::Int32 value) {
    this[this->tableplaylist_songs->playlist_IdColumn] = value;
}

inline music_player::playlistRow^  music_player::playlist_songsRow::playlistRow::get() {
    return (cli::safe_cast<music_player::playlistRow^  >(this->GetParentRow(this->Table->ParentRelations[L"playlist_playlist_songs"])));
}
inline System::Void music_player::playlist_songsRow::playlistRow::set(music_player::playlistRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"playlist_playlist_songs"]);
}

inline ::System::Boolean music_player::playlist_songsRow::Isplaylist_IdNull() {
    return this->IsNull(this->tableplaylist_songs->playlist_IdColumn);
}

inline ::System::Void music_player::playlist_songsRow::Setplaylist_IdNull() {
    this[this->tableplaylist_songs->playlist_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< music_player::playlist_songRow^  >^  music_player::playlist_songsRow::Getplaylist_songRows() {
    if (this->Table->ChildRelations[L"playlist_songs_playlist_song"] == nullptr) {
        return gcnew cli::array< music_player::playlist_songRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< music_player::playlist_songRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"playlist_songs_playlist_song"])));
    }
}


inline music_player::playlist_songRow::playlist_songRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableplaylist_song = (cli::safe_cast<music_player::playlist_songDataTable^  >(this->Table));
}

inline System::String^  music_player::playlist_songRow::playlist_song_Column::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableplaylist_song->playlist_song_ColumnColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'playlist_song_Column\' in table \'playlist_song\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::playlist_songRow::playlist_song_Column::set(System::String^  value) {
    this[this->tableplaylist_song->playlist_song_ColumnColumn] = value;
}

inline System::Int32 music_player::playlist_songRow::playlist_songs_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableplaylist_song->playlist_songs_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'playlist_songs_Id\' in table \'playlist_song\' is DBNull.", 
            e));
    }
}
inline System::Void music_player::playlist_songRow::playlist_songs_Id::set(System::Int32 value) {
    this[this->tableplaylist_song->playlist_songs_IdColumn] = value;
}

inline music_player::playlist_songsRow^  music_player::playlist_songRow::playlist_songsRow::get() {
    return (cli::safe_cast<music_player::playlist_songsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"playlist_songs_playlist_song"])));
}
inline System::Void music_player::playlist_songRow::playlist_songsRow::set(music_player::playlist_songsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"playlist_songs_playlist_song"]);
}

inline ::System::Boolean music_player::playlist_songRow::Isplaylist_song_ColumnNull() {
    return this->IsNull(this->tableplaylist_song->playlist_song_ColumnColumn);
}

inline ::System::Void music_player::playlist_songRow::Setplaylist_song_ColumnNull() {
    this[this->tableplaylist_song->playlist_song_ColumnColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean music_player::playlist_songRow::Isplaylist_songs_IdNull() {
    return this->IsNull(this->tableplaylist_song->playlist_songs_IdColumn);
}

inline ::System::Void music_player::playlist_songRow::Setplaylist_songs_IdNull() {
    this[this->tableplaylist_song->playlist_songs_IdColumn] = ::System::Convert::DBNull;
}


inline music_player::songsRowChangeEvent::songsRowChangeEvent(music_player::songsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::songsRow^  music_player::songsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::songsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::songRowChangeEvent::songRowChangeEvent(music_player::songRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::songRow^  music_player::songRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::songRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::song_artistsRowChangeEvent::song_artistsRowChangeEvent(music_player::song_artistsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::song_artistsRow^  music_player::song_artistsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::song_artistsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::song_artistRowChangeEvent::song_artistRowChangeEvent(music_player::song_artistRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::song_artistRow^  music_player::song_artistRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::song_artistRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::artistsRowChangeEvent::artistsRowChangeEvent(music_player::artistsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::artistsRow^  music_player::artistsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::artistsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::artistRowChangeEvent::artistRowChangeEvent(music_player::artistRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::artistRow^  music_player::artistRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::artistRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::artist_albumsRowChangeEvent::artist_albumsRowChangeEvent(music_player::artist_albumsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::artist_albumsRow^  music_player::artist_albumsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::artist_albumsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::artist_albumRowChangeEvent::artist_albumRowChangeEvent(music_player::artist_albumRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::artist_albumRow^  music_player::artist_albumRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::artist_albumRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::artist_songsRowChangeEvent::artist_songsRowChangeEvent(music_player::artist_songsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::artist_songsRow^  music_player::artist_songsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::artist_songsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::artist_songRowChangeEvent::artist_songRowChangeEvent(music_player::artist_songRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::artist_songRow^  music_player::artist_songRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::artist_songRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::albumsRowChangeEvent::albumsRowChangeEvent(music_player::albumsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::albumsRow^  music_player::albumsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::albumsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::albumRowChangeEvent::albumRowChangeEvent(music_player::albumRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::albumRow^  music_player::albumRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::albumRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::album_artistsRowChangeEvent::album_artistsRowChangeEvent(music_player::album_artistsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::album_artistsRow^  music_player::album_artistsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::album_artistsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::album_artistRowChangeEvent::album_artistRowChangeEvent(music_player::album_artistRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::album_artistRow^  music_player::album_artistRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::album_artistRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::album_songsRowChangeEvent::album_songsRowChangeEvent(music_player::album_songsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::album_songsRow^  music_player::album_songsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::album_songsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::album_songRowChangeEvent::album_songRowChangeEvent(music_player::album_songRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::album_songRow^  music_player::album_songRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::album_songRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::playlistsRowChangeEvent::playlistsRowChangeEvent(music_player::playlistsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::playlistsRow^  music_player::playlistsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::playlistsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::playlistRowChangeEvent::playlistRowChangeEvent(music_player::playlistRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::playlistRow^  music_player::playlistRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::playlistRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::playlist_songsRowChangeEvent::playlist_songsRowChangeEvent(music_player::playlist_songsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::playlist_songsRow^  music_player::playlist_songsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::playlist_songsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline music_player::playlist_songRowChangeEvent::playlist_songRowChangeEvent(music_player::playlist_songRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline music_player::playlist_songRow^  music_player::playlist_songRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction music_player::playlist_songRowChangeEvent::Action::get() {
    return this->eventAction;
}
